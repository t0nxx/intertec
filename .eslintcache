[{"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\index.tsx":"1","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\reportWebVitals.ts":"2","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\i18n.ts":"3","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\store.ts":"4","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\App.tsx":"5","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\rootReducer.ts":"6","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\router.tsx":"7","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\ignored-from-header-footer-routes.tsx":"8","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\organisms\\nav-bar\\nav-bar.tsx":"9","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\organisms\\page-header\\page-header.tsx":"10","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\organisms\\footer\\footer.tsx":"11","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\configReducer.js":"12","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\footerReducer.js":"13","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\review-screen\\review-screen.tsx":"14","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\attachment-screen\\attachment-screen.tsx":"15","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\success-screen\\success-screen.tsx":"16","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\pharamaceutical-establishment.tsx":"17","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\payment-screen\\payment-screen.tsx":"18","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\relocation-license-screen\\relocation-license-screen.tsx":"19","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\add-area-extention\\add-area-extention.tsx":"20","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\speciality\\speciality.tsx":"21","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\partner-details\\add-partner\\add-partner.tsx":"22","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\molecules\\sticky-info\\sticky-info.tsx":"23","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\index.js":"24","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\index.tsx":"25","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\helper.ts":"26","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\partner-details\\add-partner\\add-partner-helper.ts":"27","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\partner-details\\partner-details.tsx":"28","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\etablishment-inforamtion\\establishment-information.tsx":"29","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\contact-inforamtion\\contact-information.tsx":"30","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\location-inforamtion\\location-information.tsx":"31","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\owner-detail\\owner-detail.tsx":"32","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\add-area-extention\\reason-for-area-extention\\reason-for-area-extention.tsx":"33","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\speciality\\remove-speciality\\remove-speciality.tsx":"34","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\request-information\\request-information.tsx":"35","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\actionTypes\\index.js":"36","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\self-evaluation\\self-evaluation.tsx":"37","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\attachment.tsx":"38","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\atoms\\buttons\\next-button\\next-button.tsx":"39","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\atoms\\buttons\\save-and-cancel\\save-and-cancel.tsx":"40","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\change-name-of-pharmaceutical-establishment.js":"41","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\change-name-payment-screen.js":"42","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\reviewer-comment.js":"43","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\routes.js":"44","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\relocation-license-screen\\location-inforamtion\\location-information.tsx":"45","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\preview-information.js":"46","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\final-attachment\\final-attachment.js":"47","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\establishment-information.tsx":"48","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\contact-information.tsx":"49","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\location-information.tsx":"50","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\owner-details.tsx":"51","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\step-number.tsx":"52","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\partner-details.tsx":"53","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\self-evaluation.tsx":"54","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\progress-bar.tsx":"55","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\actions-types.ts":"56","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\speciality\\remove-speciality\\remove-speciality-helper.ts":"57","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\add-area-extention\\reason-for-area-extention\\reason-for-area-extention-helper.ts":"58","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\reviewer-documents.js":"59","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\constants\\errors\\validation-msg.tsx":"60","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\initial-preview-step\\PreviewScreenComponent.js":"61","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\final-attachment\\dragger-attachment.js":"62","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\partner-details.js":"63","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\owner-details.js":"64","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\location-information.js":"65","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\contact-information.js":"66","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\utils\\UtilMethods.js":"67","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\establishment-information.js":"68","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\name-change-form.js":"69","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\attachment-file.js":"70","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\relocation-license-screen\\location-inforamtion\\location-information-helper.ts":"71","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\etablishment-inforamtion\\establishment-information-helper.ts":"72","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\contact-inforamtion\\contact-information-helper.ts":"73","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\location-inforamtion\\location-information-helper.ts":"74","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\owner-detail\\owner-detail-helper.ts":"75","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attach-option.js":"76","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\establishment-plan-upload-department.js":"77","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\establishment-plan-upload-name.js":"78","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\establishment-plan-upload.js":"79","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\self-evaluation\\self-evaluation-helper.ts":"80","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\uploading-processing\\uploading-processing.tsx":"81","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\upload-options\\upload-options.tsx":"82","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\drag-area\\drag-area.tsx":"83","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\dragger-attachment.js":"84","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\helpers\\uploaders\\dropbox.tsx":"85","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\utils\\index.js":"86","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\utils\\toast.js":"87"},{"size":793,"mtime":1608182329125,"results":"88","hashOfConfig":"89"},{"size":440,"mtime":1608182329132,"results":"90","hashOfConfig":"89"},{"size":501,"mtime":1608182329124,"results":"91","hashOfConfig":"89"},{"size":245,"mtime":1608182329132,"results":"92","hashOfConfig":"89"},{"size":1498,"mtime":1608185125477,"results":"93","hashOfConfig":"89"},{"size":352,"mtime":1608182950908,"results":"94","hashOfConfig":"89"},{"size":2208,"mtime":1608184909004,"results":"95","hashOfConfig":"89"},{"size":168,"mtime":1608182329124,"results":"96","hashOfConfig":"89"},{"size":7998,"mtime":1608182329008,"results":"97","hashOfConfig":"89"},{"size":2412,"mtime":1608182329009,"results":"98","hashOfConfig":"89"},{"size":3554,"mtime":1608182329007,"results":"99","hashOfConfig":"89"},{"size":1513,"mtime":1608130622885,"results":"100","hashOfConfig":"89"},{"size":698,"mtime":1608128825168,"results":"101","hashOfConfig":"89"},{"size":28652,"mtime":1608182329092,"results":"102","hashOfConfig":"89"},{"size":1674,"mtime":1608182329017,"results":"103","hashOfConfig":"89"},{"size":2927,"mtime":1608182329096,"results":"104","hashOfConfig":"89"},{"size":7709,"mtime":1608182329049,"results":"105","hashOfConfig":"89"},{"size":3331,"mtime":1608182329035,"results":"106","hashOfConfig":"89"},{"size":3800,"mtime":1608182329088,"results":"107","hashOfConfig":"89"},{"size":3658,"mtime":1608182329013,"results":"108","hashOfConfig":"89"},{"size":2896,"mtime":1608182329096,"results":"109","hashOfConfig":"89"},{"size":18846,"mtime":1608182329046,"results":"110","hashOfConfig":"89"},{"size":2967,"mtime":1608182329006,"results":"111","hashOfConfig":"89"},{"size":555,"mtime":1608182329026,"results":"112","hashOfConfig":"89"},{"size":797,"mtime":1608182329129,"results":"113","hashOfConfig":"89"},{"size":896,"mtime":1608182329127,"results":"114","hashOfConfig":"89"},{"size":2291,"mtime":1608182329045,"results":"115","hashOfConfig":"89"},{"size":5409,"mtime":1608182329048,"results":"116","hashOfConfig":"89"},{"size":6521,"mtime":1608182329039,"results":"117","hashOfConfig":"89"},{"size":9917,"mtime":1608182329038,"results":"118","hashOfConfig":"89"},{"size":8108,"mtime":1608182329042,"results":"119","hashOfConfig":"89"},{"size":19444,"mtime":1608182329044,"results":"120","hashOfConfig":"89"},{"size":4796,"mtime":1608182329015,"results":"121","hashOfConfig":"89"},{"size":6861,"mtime":1608182329094,"results":"122","hashOfConfig":"89"},{"size":3885,"mtime":1608182329011,"results":"123","hashOfConfig":"89"},{"size":2875,"mtime":1607765490146,"results":"124","hashOfConfig":"89"},{"size":5071,"mtime":1608182329051,"results":"125","hashOfConfig":"89"},{"size":10324,"mtime":1608182329098,"results":"126","hashOfConfig":"89"},{"size":832,"mtime":1608182328999,"results":"127","hashOfConfig":"89"},{"size":851,"mtime":1608182329000,"results":"128","hashOfConfig":"89"},{"size":6103,"mtime":1608185897018,"results":"129","hashOfConfig":"89"},{"size":5129,"mtime":1608182329024,"results":"130","hashOfConfig":"89"},{"size":5050,"mtime":1608182329031,"results":"131","hashOfConfig":"89"},{"size":813,"mtime":1608182329033,"results":"132","hashOfConfig":"89"},{"size":9597,"mtime":1608182329065,"results":"133","hashOfConfig":"89"},{"size":1628,"mtime":1608182329031,"results":"134","hashOfConfig":"89"},{"size":6950,"mtime":1608182329026,"results":"135","hashOfConfig":"89"},{"size":902,"mtime":1608182329129,"results":"136","hashOfConfig":"89"},{"size":863,"mtime":1608182329128,"results":"137","hashOfConfig":"89"},{"size":870,"mtime":1608182329130,"results":"138","hashOfConfig":"89"},{"size":806,"mtime":1608182329130,"results":"139","hashOfConfig":"89"},{"size":793,"mtime":1608182329131,"results":"140","hashOfConfig":"89"},{"size":1155,"mtime":1608182329130,"results":"141","hashOfConfig":"89"},{"size":796,"mtime":1608182329131,"results":"142","hashOfConfig":"89"},{"size":613,"mtime":1608182329131,"results":"143","hashOfConfig":"89"},{"size":657,"mtime":1608182329127,"results":"144","hashOfConfig":"89"},{"size":478,"mtime":1608182329093,"results":"145","hashOfConfig":"89"},{"size":478,"mtime":1608182329014,"results":"146","hashOfConfig":"89"},{"size":5900,"mtime":1608182329032,"results":"147","hashOfConfig":"89"},{"size":114,"mtime":1608182329001,"results":"148","hashOfConfig":"89"},{"size":28714,"mtime":1608185998257,"results":"149","hashOfConfig":"89"},{"size":2402,"mtime":1608182329025,"results":"150","hashOfConfig":"89"},{"size":2857,"mtime":1608186125102,"results":"151","hashOfConfig":"89"},{"size":6286,"mtime":1608186125088,"results":"152","hashOfConfig":"89"},{"size":4507,"mtime":1608186125113,"results":"153","hashOfConfig":"89"},{"size":4421,"mtime":1608186125077,"results":"154","hashOfConfig":"89"},{"size":225,"mtime":1608183989334,"results":"155","hashOfConfig":"89"},{"size":7386,"mtime":1608186123138,"results":"156","hashOfConfig":"89"},{"size":10176,"mtime":1608182329027,"results":"157","hashOfConfig":"89"},{"size":10943,"mtime":1608182329020,"results":"158","hashOfConfig":"89"},{"size":1078,"mtime":1608182329053,"results":"159","hashOfConfig":"89"},{"size":891,"mtime":1608182329038,"results":"160","hashOfConfig":"89"},{"size":1475,"mtime":1608182329036,"results":"161","hashOfConfig":"89"},{"size":1078,"mtime":1608182329040,"results":"162","hashOfConfig":"89"},{"size":2310,"mtime":1608182329042,"results":"163","hashOfConfig":"89"},{"size":1207,"mtime":1608182329018,"results":"164","hashOfConfig":"89"},{"size":3615,"mtime":1608182329021,"results":"165","hashOfConfig":"89"},{"size":3605,"mtime":1608182329022,"results":"166","hashOfConfig":"89"},{"size":4486,"mtime":1608182329023,"results":"167","hashOfConfig":"89"},{"size":690,"mtime":1608182329049,"results":"168","hashOfConfig":"89"},{"size":1163,"mtime":1608182329101,"results":"169","hashOfConfig":"89"},{"size":901,"mtime":1608182329100,"results":"170","hashOfConfig":"89"},{"size":771,"mtime":1608182329099,"results":"171","hashOfConfig":"89"},{"size":2950,"mtime":1608182329021,"results":"172","hashOfConfig":"89"},{"size":673,"mtime":1608182329001,"results":"173","hashOfConfig":"89"},{"size":106,"mtime":1608025366057,"results":"174","hashOfConfig":"89"},{"size":1204,"mtime":1608026479638,"results":"175","hashOfConfig":"89"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},"1whsmmh",{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"178"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"178"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"204"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"178"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"178"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"178"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"178"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"178"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"178"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"178"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"178"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"178"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"178"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"178"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"178"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"178"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"178"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"178"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"204"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"178"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"204"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"178"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"204"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"204"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"204"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"204"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"204"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"204"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"204"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"204"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"178"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"204"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\index.tsx",[],["384","385"],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\reportWebVitals.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\i18n.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\store.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\App.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\rootReducer.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\router.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\ignored-from-header-footer-routes.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\organisms\\nav-bar\\nav-bar.tsx",["386","387","388"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport i18n from \"../../../i18n\";\r\nimport \"./nav-bar.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faMicrophone,\r\n  faPhoneAlt,\r\n  faQuestionCircle,\r\n  faSearch,\r\n  faSitemap,\r\n  faVolumeUp,\r\n  faLowVision,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Badge, Dropdown, Nav, Navbar, Image, Container, Row, Col } from \"react-bootstrap\";\r\nimport logo from \"../../../logo.png\";\r\n\r\n// Import images\r\nimport name from\"../../../assets/name.jpg\";\r\nimport bell from \"../../../assets/bell.svg\";\r\nimport notiicon1 from \"../../../assets/notiicon1.svg\";\r\nimport notiicon2 from \"../../../assets/notiicon2.svg\";\r\nimport notiicon3 from \"../../../assets/notiicon3.svg\";\r\n\r\nexport default function NavBarComponent() {\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const changeDirection = (lang: string) => {\r\n    document.getElementsByTagName(\"html\")[0].setAttribute(\"lang\", lang);\r\n    document.getElementsByTagName(\"body\")[0].setAttribute(\"dir\", lang === \"ar\" ? \"rtl\" : \"ltr\");\r\n  };\r\n  const toggleLanguage = () => {\r\n    const nextLang = i18n.language === \"ar\" ? \"en\" : \"ar\";\r\n    i18n.changeLanguage(nextLang);\r\n    changeDirection(nextLang);\r\n  };\r\n  const show = false;\r\n\r\n  return (\r\n    <Navbar\r\n      collapseOnSelect\r\n      expand=\"lg\"\r\n      variant=\"light\"\r\n      bg=\"light\"\r\n      className=\"top-nav\"\r\n      // onToggle={() => {\r\n      //   show = !show;\r\n      // }}\r\n    >\r\n      <Navbar.Brand href=\"/\">\r\n        <img\r\n          src={logo}\r\n          width=\"200\"\r\n          height=\"50\"\r\n          className=\"d-inline-block align-top ml-5\"\r\n          alt=\"React Bootstrap logo\"\r\n        />\r\n      </Navbar.Brand>\r\n\r\n      {show ? <DropDownUserComponent /> : null}\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse className=\"justify-content-end\" id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\" />\r\n        <Nav>\r\n          <button type=\"button\" className=\"toggleLang\" onClick={toggleLanguage}>\r\n            <a>{t(\"Titles.AppLanguage\")}</a>\r\n          </button>\r\n          <Nav className=\"headerIcons\">\r\n            <Nav.Item>\r\n              <Nav.Link href=\"/home\">\r\n                <FontAwesomeIcon icon={faVolumeUp} size=\"sm\" color=\"black\" className=\"mr-2 ml-2\" />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"/home\">\r\n                <FontAwesomeIcon icon={faSitemap} size=\"sm\" color=\"black\" className=\"mr-2 ml-2\" />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"/home\">\r\n                <FontAwesomeIcon icon={faPhoneAlt} size=\"sm\" color=\"black\" className=\"mr-2 ml-2\" />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"/home\">\r\n                <FontAwesomeIcon\r\n                  icon={faQuestionCircle}\r\n                  size=\"sm\"\r\n                  color=\"black\"\r\n                  className=\"mr-2 ml-2\"\r\n                />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"/home\">\r\n                <FontAwesomeIcon icon={faLowVision} size=\"sm\" color=\"black\" className=\"mr-2 ml-2\" />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"/home\">\r\n                <FontAwesomeIcon icon={faSearch} size=\"sm\" color=\"black\" className=\"mr-2 ml-2\" />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"/home\">\r\n                <FontAwesomeIcon\r\n                  icon={faMicrophone}\r\n                  size=\"sm\"\r\n                  color=\"black\"\r\n                  className=\"mr-2 ml-2\"\r\n                />\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          {/* Notifications drop menu */}\r\n          <Dropdown className=\"notification-list\">\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"notifications\">\r\n              <Image src={bell} />\r\n              <Badge pill variant=\"danger\">\r\n                4\r\n              </Badge>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item as=\"div\">\r\n                <Row>\r\n                  <Col md=\"2\">\r\n                    <div className=\"img-con\">\r\n                      <Image src={notiicon1} />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"10\">\r\n                    <h6>{t(\"Titles.Relocation License Pharmaceutical\")}</h6>\r\n                    <p> {t(\"Titles.you have new request under review\")}</p>\r\n                  </Col>\r\n                </Row>\r\n              </Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <Dropdown.Item as=\"div\">\r\n                <Row>\r\n                  <Col md=\"2\">\r\n                    <div className=\"img-con\">\r\n                      <Image src={notiicon2} />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"10\" onClick={() => history.push(\"/payment\")}>\r\n                    <h6> {t(\"Titles.Relocation License Pharamaceutical\")}</h6>\r\n                    <p>\r\n                      {t(\r\n                        \"Titles.on behalf of the Ministry of Health and Prevention we would thank you for submitting a new request\"\r\n                      )}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <Dropdown.Item as=\"div\">\r\n                <Row>\r\n                  <Col md=\"2\">\r\n                    <div className=\"img-con\">\r\n                      <Image src={notiicon3} />\r\n                    </div>\r\n                  </Col>\r\n                  <Col md=\"10\">\r\n                    <h6> {t(\"Titles.Send Back!\")}</h6>\r\n                    <p>\r\n                      {t(\r\n                        \"Titles.Request needs update Kindly use below link to view reviewer comments Complete Request\"\r\n                      )}{\" \"}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <Dropdown.Item as=\"div\">\r\n                <Row>\r\n                  <Col className=\"see-all\">\r\n                    <a>{t(\"Buttons.See All\")}</a>\r\n                  </Col>\r\n                </Row>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n\r\n          {/* User drop menu */}\r\n          {/* <Dropdown className=\"dropDownUser\">\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"user\">\r\n              <strong> {t(\"Titles.UserName\")}</strong>\r\n              <Image src={name} roundedCircle />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item href=\"#/action-1\">test action</Dropdown.Item>\r\n              <Dropdown.Item href=\"#/action-2\">test Another action</Dropdown.Item>\r\n              <Dropdown.Item href=\"#/action-3\">test Something else</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown> */}\r\n          <DropDownUserComponent />\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\nfunction DropDownUserComponent() {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Dropdown className=\"dropDownUser\">\r\n      <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" className=\"user\">\r\n        <strong> {t(\"Titles.UserName\")}</strong>\r\n        <Image src={name} roundedCircle />\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item href=\"#/action-1\">test action</Dropdown.Item>\r\n        <Dropdown.Item href=\"#/action-2\">test Another action</Dropdown.Item>\r\n        <Dropdown.Item href=\"#/action-3\">test Something else</Dropdown.Item>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\organisms\\page-header\\page-header.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\organisms\\footer\\footer.tsx",["389"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport \"./footer.scss\";\r\nimport { Navbar, Image, ProgressBar, Row, Col } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StateSelectorInterface } from \"../../../redux/reducers/helper\";\r\nimport InfoComponent from \"../../molecules/sticky-info/sticky-info\";\r\n\r\n// Import images\r\nimport applicationIc from \"../../../assets/applicationIc.svg\";\r\nimport attachmentIc from \"../../../assets/attachmentIc.svg\";\r\nimport attachmentIcGreen from \"../../../assets/attachmentIcGreen.svg\";\r\nimport previewIc from \"../../../assets/previewIc.svg\";\r\nimport previewIcGreen from \"../../../assets/previewIcGreen.svg\";\r\n\r\nimport back from \"../../../assets/back.svg\";\r\n\r\nexport default function FooterComponent() {\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const isInAttachPage = location.pathname === \"/attachment\";\r\n  const isInPreviewPage = location.pathname === \"/review\";\r\n  const isInPaymentPage = location.pathname === \"/payment\";\r\n\r\n  // progress bar state\r\n  const progressPersentage = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.progressBarPersentageReducer\r\n  );\r\n  return (\r\n    <Navbar expand=\"lg\" fixed=\"bottom\" className=\"footer\">\r\n      <div className=\"flagIc\"> </div>\r\n      <InfoComponent />\r\n      <div className=\"stickyBack\">\r\n        <Image src={back} onClick={() => history.goBack()} hidden={true} />\r\n      </div>\r\n      <ProgressBar variant=\"success\" now={progressPersentage} className=\"progress\" />\r\n      <Row className=\"statistics-container\">\r\n        {/* <div>\r\n          <Image src={applicationIc} />\r\n          <span className=\"active\">{t(\"Titles.Application form\")}</span>\r\n        </div>\r\n        <div>\r\n          <Image src={attachmentIc} />\r\n          <span> {t(\"Titles.Attachment\")}</span>\r\n        </div>\r\n        <div>\r\n          <Image src={previewIc} />\r\n          <span>  {t(\"Titles.Preview\")}</span>\r\n        </div>\r\n        <div className=\"complete\">\r\n          <span> {t(\"Titles.Complete progress\")}</span>\r\n          <strong>{progressPersentage} %</strong>\r\n        </div> */}\r\n        <Col xs={3} className=\"hideOnTaplet\">\r\n          <Row xs={12} sm={12}>\r\n            <Col className=\"image1 prog\">\r\n              <p>{t(\"Titles.Complete progress\")}</p>\r\n              <span>{progressPersentage} %</span>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n\r\n        <Col xs={3}>\r\n          <Row xs={12} sm={4}>\r\n            <Col className=\"image1\">\r\n              <Image src={applicationIc} />\r\n            </Col>\r\n            <Col xs={12} sm={8}>\r\n              <span className=\"active\">{t(\"Titles.Application form\")}</span>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n\r\n        <Col xs={3}>\r\n          <Row>\r\n            <Col xs={12} sm={4}>\r\n              <Image src={isInAttachPage || isInPreviewPage ? attachmentIcGreen : attachmentIc} />\r\n            </Col>\r\n            <Col xs={12} sm={8}>\r\n              <span> {t(\"Titles.Attachment\")}</span>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col xs={3}>\r\n          <Row>\r\n            <Col xs={12} sm={4}>\r\n              <Image src={isInPreviewPage ? previewIcGreen : previewIc} />\r\n            </Col>\r\n            <Col xs={12} sm={8}>\r\n              <span> {t(\"Titles.Preview\")}</span>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Navbar>\r\n  );\r\n}\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\configReducer.js",["390"],"import * as types from \"../actionTypes\";\n\nconst initialState = {\n  direction: \"ltr\",\n  locale: \"en\",\n  progress: 5,\n  current_flow: \"DEFAULT\",\n  show_external_footer: true, // Change name view page external footer,\n  show_default_header: true,\n  show_custom_header: false,\n  headerTitle: \"\",\n  serviceName: \"\",\n};\n\nexport default function (state = initialState, action) {\n  const { payload } = action;\n  switch (action.type) {\n    case types.CONFIG_DIRECTION:\n      return {\n        ...state,\n        direction: action.payload.direction,\n        locale: action.payload.locale,\n      };\n    case types.PROGRESS_ACTION:\n      return {\n        ...state,\n        progress: action.payload.progress,\n      };\n    case types.COMMON_CONFIG:\n      return {\n        ...state,\n        current_flow: action.payload.current_flow,\n      };\n    case types.SHOW_EXTERNAL_FOOTER:\n      return {\n        ...state,\n        show_external_footer: action.payload.show_external_footer,\n      };\n    case types.CHANGE_CUSTOM_SUB_HEADER: {\n      const { isHeaderView = false } = payload;\n      return {\n        ...state,\n        show_default_header: !isHeaderView,\n        show_custom_header: isHeaderView,\n      };\n    }\n    case types.SET_SUB_HEADER_TITLE:\n      // handling title change\n      return {\n        ...state,\n        headerTitle: payload.headerTitle,\n      };\n    case types.SET_SERVICE_NAME: {\n      return {\n        ...state,\n        serviceName: payload.serviceName,\n      };\n    }\n    default:\n      return state;\n  }\n}\n",["391","392"],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\footerReducer.js",["393"],"import * as types from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  serviceDetails: [],\r\n  showCustomFooter: false,\r\n  isFirstStep: true,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { payload } = action;\r\n  switch (action.type) {\r\n    case types.SET_SERVICE_DESCRIPTION:\r\n      return { ...state, serviceDetails: payload.serviceDetails };\r\n    case types.CHANGE_CUSTOM_FOOTER: {\r\n      return {\r\n        ...state,\r\n        showCustomFooter: payload.showCustomFooter,\r\n      };\r\n    }\r\n    case types.CHANGE_FOOTER_FIRST_STEP: {\r\n      return {\r\n        ...state,\r\n        isFirstStep: payload.isFirstStep,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\review-screen\\review-screen.tsx",["394","395","396","397"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./review-screen.scss\";\r\nimport { Container, Accordion, Card, Image, Row, Col, Table, Button, Modal } from \"react-bootstrap\";\r\n\r\n// Import images\r\nimport upArrow4Collaps from \"../../../assets/upArrow4Collaps.svg\";\r\nimport editPen from \"../../../assets/editPen.svg\";\r\nimport locationWhite from \"../../../assets/location-white.svg\";\r\n// screens to edit\r\nimport EstablishmentInformationComponent from \"../pharamaceutical-establishment-screen/etablishment-inforamtion/establishment-information\";\r\nimport ContactInformationComponent from \"../pharamaceutical-establishment-screen/contact-inforamtion/contact-information\";\r\nimport LocationInformationComponent from \"../pharamaceutical-establishment-screen/location-inforamtion/location-information\";\r\nimport OwnerDetailComponent from \"../pharamaceutical-establishment-screen/owner-detail/owner-detail\";\r\nimport PartnerDetailsComponent from \"../pharamaceutical-establishment-screen/partner-details/partner-details\";\r\nimport AddPartnerComponent from \"../pharamaceutical-establishment-screen/partner-details/add-partner/add-partner\";\r\nimport ReasonForAreaExtention from \"../add-area-extention/reason-for-area-extention/reason-for-area-extention\";\r\nimport RemoveSpeciality from \"../speciality/remove-speciality/remove-speciality\";\r\n\r\nimport file from \"../../../assets/file.svg\";\r\nimport del from \"../../../assets/delete.svg\";\r\nimport userPhoto from \"../../../assets/userPhoto.svg\";\r\nimport collaps from \"../../../assets/collaps.svg\";\r\nimport expand from \"../../../assets/expand.svg\";\r\nimport minus from \"../../../assets/minus-circle-solid.svg\";\r\n\r\nexport default function ReviewScreenComponent() {\r\n  const [isEditEstablish, setIsEditEstablish] = useState(false);\r\n  const [isEditContact, setIsEditContact] = useState(false);\r\n  const [isEditLocation, setIsEditLocation] = useState(false);\r\n  const [isEditOwner, setIsEditOwner] = useState(false);\r\n  const [isEditPartner, setIsEditPartner] = useState(true);\r\n  const [isEditArea, setIsEditArea] = useState(false);\r\n  const [isEditSpeciallity, setIsEditSpeciallity] = useState(false);\r\n\r\n  const { t } = useTranslation();\r\n\r\n  // the logic here ... acordation take active key as string number\r\n  // so i'll set all accordation with default 0 value which mean i our case\r\n  // all collapse are opend\r\n  // on the other hand to close all , i will set th default key a number that not 0\r\n  // so that all that have event key 0 wont open\r\n  const [collapseAllState, setcollapseAllState] = useState(\"0\");\r\n\r\n  const collapseAll = () => setcollapseAllState(\"1\");\r\n  const expandAll = () => setcollapseAllState(\"0\");\r\n\r\n  const history = useHistory();\r\n  useEffect(() => {}, [collapseAllState]);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <div className=\"screenContent\">\r\n        <Row>\r\n          {/* Screen Head */}\r\n          <div className=\"screenHead\">\r\n            <Row>\r\n              <Col>\r\n                <div className=\"btnsContainer\">\r\n                  <Button className=\"collaps\" onClick={collapseAll}>\r\n                    <Image src={collaps} />\r\n                    {t(\"Titles.Collapse all\")}\r\n                  </Button>\r\n                  <Button className=\"expand\" onClick={expandAll}>\r\n                    <Image src={expand} />\r\n                    {t(\"Titles.expand all\")}\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n              <Col className=\"submit\">\r\n                <Button onClick={() => history.push(\"/success\")}>{t(\"Buttons.Submit\")}</Button>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          {/* Screen Head */}\r\n\r\n          {/* Start Establishment Information */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1>{t(\"Titles.Establishment Information\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  {isEditEstablish ? (\r\n                    <EstablishmentInformationComponent\r\n                      isForReviewPage={true}\r\n                      onSubmitOrCancelEvent={() => setIsEditEstablish(!isEditEstablish)}\r\n                    />\r\n                  ) : (\r\n                    <Card.Body>\r\n                      <Image\r\n                        src={editPen}\r\n                        className=\"edit\"\r\n                        onClick={() => setIsEditEstablish(!isEditEstablish)}\r\n                      />\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Titles.Establishment Name (English)\")}</p>\r\n                          <span>Establishment Name (English)</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Establishment Name (Arabic)\")}</p>\r\n                          <span>Establishment Name (Arabic)</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Establishment Type\")}</p>\r\n                          <span>Establishment Type</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Category\")}</p>\r\n                          <span>Category</span>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  )}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n          {/* End Establishment Information */}\r\n\r\n          {/* Start Contact information */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1>{t(\"Forms.Contact information\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  {isEditContact ? (\r\n                    <ContactInformationComponent\r\n                      isForReviewPage={true}\r\n                      onSubmitOrCancelEvent={() => setIsEditContact(!isEditContact)}\r\n                    />\r\n                  ) : (\r\n                    <Card.Body>\r\n                      <Image\r\n                        src={editPen}\r\n                        className=\"edit\"\r\n                        onClick={() => setIsEditContact(!isEditContact)}\r\n                      />\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Contact Name\")}</p>\r\n                          <span>Contact Name</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Designation\")}</p>\r\n                          <span>Designation</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Primary Email\")}</p>\r\n                          <span>A@a.com</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Alternative Email\")}</p>\r\n                          <span>A@a.com</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Contact Number\")}</p>\r\n                          <span>+971 000 000</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p> {t(\"Forms.Alternative Contact No\")}</p>\r\n                          <span>+971 000 000</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col>\r\n                          <p>{t(\"Forms.Fax\")}</p>\r\n                          <span>Fax</span>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  )}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n          {/* End Contact information */}\r\n\r\n          {/* Start Location information */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1>{t(\"Titles.Location Information\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  {isEditLocation ? (\r\n                    <LocationInformationComponent\r\n                      isForReviewPage={true}\r\n                      onSubmitOrCancelEvent={() => setIsEditLocation(!isEditLocation)}\r\n                    />\r\n                  ) : (\r\n                    <Card.Body>\r\n                      <Image\r\n                        src={editPen}\r\n                        className=\"edit\"\r\n                        onClick={() => setIsEditLocation(!isEditLocation)}\r\n                      />\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Emirate\")}</p>\r\n                          <span>Emirate</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Area\")}</p>\r\n                          <span>Area</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Street\")}</p>\r\n                          <span>Street</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Building Name\")}</p>\r\n                          <span>PO Box</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Po Box\")}</p>\r\n                          <span>PO Box</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Building No\")}</p>\r\n                          <span>Building NO</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col>\r\n                          <p>{t(\"Buttons.Google Map URL\")}</p>\r\n                          <a href=\"\">\r\n                            <span className=\"mapBtn\">\r\n                              <Image src={locationWhite} />\r\n                              {t(\"Buttons.Google Map URL\")}\r\n                            </span>\r\n                          </a>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  )}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n          {/* End Location information */}\r\n\r\n          {/* Start owner Details */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1>{t(\"Titles.Owner Details\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  {isEditOwner ? (\r\n                    <OwnerDetailComponent\r\n                      isForReviewPage={true}\r\n                      onSubmitOrCancelEvent={() => setIsEditOwner(!isEditOwner)}\r\n                    />\r\n                  ) : (\r\n                    <Card.Body>\r\n                      <Image\r\n                        src={editPen}\r\n                        className=\"edit\"\r\n                        onClick={() => setIsEditOwner(!isEditOwner)}\r\n                      />\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <Image src={userPhoto} />\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Gender\")}</p>\r\n                          <span>Male</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.UAE Citzen\")}</p>\r\n                          <span>Yes</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.First name\")}</p>\r\n                          <span>First name</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Middle name\")}</p>\r\n                          <span>middle name</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Last name\")}</p>\r\n                          <span>Last Name</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.First name (Arabic)\")}</p>\r\n                          <span>First name (arabic)</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Middle name (Arabic)\")}</p>\r\n                          <span>middle name (arabic)</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Last Name (Arabic)\")}</p>\r\n                          <span>Last Name (arabic)</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Nationality\")}</p>\r\n                          <span>Nationality</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Passport No\")}</p>\r\n                          <span>Passport No</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Emirates ID\")}</p>\r\n                          <span>Emirates ID</span>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Family Book No\")}</p>\r\n                          <span>Family Book No</span>\r\n                        </Col>\r\n                        <Col md=\"6\" sm=\"12\">\r\n                          <p>{t(\"Forms.Share Percentage\")}</p>\r\n                          <span>Share Percentage</span>\r\n                        </Col>\r\n                        <Col> </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col>\r\n                          <Col className=\"grayBg\">\r\n                            <Row>\r\n                              <Col md=\"6\" sm=\"12\">\r\n                                <p>{t(\"Forms.Contact Number\")}</p>\r\n                                <span>+971 000 000</span>\r\n                              </Col>\r\n                              <Col md=\"6\" sm=\"12\">\r\n                                <p>{t(\"Forms.Primary Email\")}</p>\r\n                                <span>Email@mail.com</span>\r\n                              </Col>\r\n                            </Row>\r\n                          </Col>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  )}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n          {/* End owner Details */}\r\n\r\n          {/* Start Partner Details */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1> {t(\"Titles.Partner Details\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  <PartnerDetailsComponent\r\n                    isForReviewPage={true}\r\n                    onSubmitOrCancelEvent={() => setIsEditPartner(!isEditPartner)}\r\n                  />\r\n                  {/* {isEditPartner ? (\r\n                    <PartnerDetailsComponent\r\n                      isForReviewPage={true}\r\n                      onSubmitOrCancelEvent={() => setIsEditPartner(!isEditPartner)}\r\n                    />\r\n                  ) : (\r\n                    <Card.Body>\r\n                      <Row className=\"tableParent\">\r\n                        <Table>\r\n                          <thead>\r\n                            <tr>\r\n                              <th>Full Name _EN</th>\r\n                              <th>Full Name _AR</th>\r\n                              <th>Emirates ID</th>\r\n                              <th>Passport NO</th>\r\n                              <th>Nationality</th>\r\n                              <th>Share %</th>\r\n                              <th> </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <tr>\r\n                              <td>Mohamed Elzayat</td>\r\n                              <td>محمد الزيات</td>\r\n                              <td>12313-1231-456</td>\r\n                              <td>#number</td>\r\n                              <td>Nationality</td>\r\n                              <td>20%</td>\r\n                              <td>\r\n                                <Image src={editPen} />\r\n                              </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                              <td>Mohamed Elzayat</td>\r\n                              <td>محمد الزيات</td>\r\n                              <td>12313-1231-456</td>\r\n                              <td>#number</td>\r\n                              <td>Nationality</td>\r\n                              <td>20%</td>\r\n                              <td>\r\n                                <Image src={editPen} />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Mohamed Elzayat</td>\r\n                              <td>محمد الزيات</td>\r\n                              <td>12313-1231-456</td>\r\n                              <td>#number</td>\r\n                              <td>Nationality</td>\r\n                              <td>20%</td>\r\n                              <td>\r\n                                <Image src={editPen} />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Mohamed Elzayat</td>\r\n                              <td>محمد الزيات</td>\r\n                              <td>12313-1231-456</td>\r\n                              <td>#number</td>\r\n                              <td>Nationality</td>\r\n                              <td>20%</td>\r\n                              <td>\r\n                                <Image src={editPen} />\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                      </Row>\r\n                      <Row\r\n                        className=\"addMore\"\r\n                        onClick={() => setShowAddPartnerModal(!showAddPartnerModal)}\r\n                      >\r\n                        <Image src={addMore} />\r\n                        Click here to add more Partner\r\n                      </Row>\r\n                      <Modal\r\n                        show={showAddPartnerModal}\r\n                        onHide={() => setShowAddPartnerModal(!showAddPartnerModal)}\r\n                        backdrop=\"static\"\r\n                        keyboard={false}\r\n                        className=\"fullScreenModal\"\r\n                      >\r\n                        <Modal.Header closeButton>\r\n                          <Modal.Title>\r\n                            <div className=\"back\">\r\n                              <Image\r\n                                src={leftArrow}\r\n                                onClick={() => setShowAddPartnerModal(!showAddPartnerModal)}\r\n                              />\r\n                            </div>\r\n                            <div className=\"title\">\r\n                              <h1> {t(\"Forms.Add New Partner\")}</h1>\r\n                            </div>\r\n                          </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                          <AddPartnerComponent closeModal={onCloseAddPartnerModal} />\r\n                        </Modal.Body>\r\n                      </Modal>\r\n                    </Card.Body>\r\n                  )} */}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n          {/* End Partner Details */}\r\n\r\n          {/* Start Attachment */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1> {t(\"Titles.Attachment\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  <Card.Body>\r\n                    <Row>\r\n                      <div className=\"files\">\r\n                        <div className=\"file\">\r\n                          <div className=\"leftData\">\r\n                            <Image src={file} />\r\n                            <div className=\"fileData\">\r\n                              <p>Passport</p>\r\n                              <span>65 Kb</span>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"rightData\">\r\n                            <Image src={del} onClick={() => history.push(\"/attachment\")} />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"file\">\r\n                          <div className=\"leftData\">\r\n                            <Image src={file} />\r\n                            <div className=\"fileData\">\r\n                              <p>Passport</p>\r\n                              <span>65 Kb</span>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"rightData\">\r\n                            <Image src={del} onClick={() => history.push(\"/attachment\")} />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"file\">\r\n                          <div className=\"leftData\">\r\n                            <Image src={file} />\r\n                            <div className=\"fileData\">\r\n                              <p>Passport</p>\r\n                              <span>65 Kb</span>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"rightData\">\r\n                            <Image src={del} onClick={() => history.push(\"/attachment\")} />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </Row>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n\r\n          {/* End Attachment */}\r\n\r\n          {/* Start Reason for area extention */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1> {t(\"Texts.Reason For Area Extention\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  {isEditArea ? (\r\n                    <ReasonForAreaExtention\r\n                      isForReviewPage={true}\r\n                      onSubmitOrCancelEvent={() => setIsEditArea(!isEditArea)}\r\n                    />\r\n                  ) : (\r\n                    <Card.Body>\r\n                      <Image\r\n                        src={editPen}\r\n                        className=\"edit\"\r\n                        onClick={() => setIsEditArea(!isEditArea)}\r\n                      />\r\n                      <Row>\r\n                        <Col md=\"12\" sm=\"12\">\r\n                          <p>{t(\"Texts.Reason For Area Extention\")}</p>\r\n                          <span>{t(\"Texts.Reason For Area Extention\")}</span>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  )}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n          {/* End Reason for area extention */}\r\n\r\n          {/* Start Remove Speciality  */}\r\n          <div className=\"block\">\r\n            <Accordion defaultActiveKey={collapseAllState}>\r\n              <Card>\r\n                <Accordion.Toggle as={Card.Header} eventKey={collapseAllState}>\r\n                  <h1> {t(\"Forms.Remove Speciality\")}</h1>\r\n                  <Image src={upArrow4Collaps} />\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={collapseAllState}>\r\n                  {isEditSpeciallity ? (\r\n                    <RemoveSpeciality\r\n                      isForReviewPage={true}\r\n                      onSubmitOrCancelEvent={() => setIsEditSpeciallity(!isEditSpeciallity)}\r\n                    />\r\n                  ) : (\r\n                    <Card.Body>\r\n                      <Image\r\n                        src={editPen}\r\n                        className=\"edit\"\r\n                        onClick={() => setIsEditSpeciallity(!isEditSpeciallity)}\r\n                      />\r\n                      <Row>\r\n                        <Col md=\"12\" sm=\"12\">\r\n                          <p>{t(\"Forms.Specialities Removed\")}</p>\r\n                          <div className=\"removedSpecialities\">\r\n                            <ul>\r\n                              <li>\r\n                                <Image src={minus} /> {t(\"Forms.Gynecology\")}\r\n                              </li>\r\n                              <li>\r\n                                <Image src={minus} /> {t(\"Forms.immunology\")}\r\n                              </li>\r\n                              <li>\r\n                                <Image src={minus} /> {t(\"Forms.Dermatology\")}\r\n                              </li>\r\n                              <li>\r\n                                <Image src={minus} /> {t(\"Forms.Neurology\")}\r\n                              </li>\r\n                              <li>\r\n                                <Image src={minus} /> {t(\"Forms.rehabilitation\")}\r\n                              </li>\r\n                            </ul>\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col md=\"12\" sm=\"12\">\r\n                          <p>{t(\"Forms.Total Number of Specialties\")}</p>\r\n                          <span>10</span>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  )}\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </div>\r\n          {/* End Remove Speciality */}\r\n\r\n          {/* Submit */}\r\n          <div className=\"submit\">\r\n            <Button onClick={() => history.push(\"/success\")}>{t(\"Buttons.Submit\")}</Button>\r\n          </div>\r\n          {/* Submit */}\r\n        </Row>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\attachment-screen\\attachment-screen.tsx",["398"],"import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next/\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport AttachmentComponent from \"../../templates/attachment/attachment\";\r\nimport NextButton from \"../../atoms/buttons/next-button/next-button\";\r\nimport \"./attachment-screen.scss\";\r\n\r\n// Import images\r\n\r\nconst AttachmentScreenComponent = ({ whereToGo }) => {\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const location: any = useLocation();\r\n\r\n  const [nextButtonText, setNextButtonText] = useState(\"Go To Preview\");\r\n  const [nextButtonToGoRoute, setNextButtonToGoRoute] = useState(\"/review\");\r\n  const openWithSliderCarosel = location.state?.withslidercarosel || false;\r\n\r\n  const decidedToGoHandler = () => {\r\n    history.push(nextButtonToGoRoute);\r\n  };\r\n\r\n  useEffect(() => {\r\n    /// to handel multiple carosels or not it the attachement component\r\n    if (location.state?.wherToGo === \"/payment\") {\r\n      setNextButtonText(\"Go To Payment\");\r\n      setNextButtonToGoRoute(location.state.wherToGo);\r\n    }\r\n  }, [location.state?.wherToGo, location.state?.withslidercarosel]);\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <div className=\"contentContainer\">\r\n          <AttachmentComponent withslidercarosel={openWithSliderCarosel} />\r\n          <Row className=\"justify-content-center\" onClick={decidedToGoHandler}>\r\n            <NextButton customText={t(`Buttons.${nextButtonText}`)} />\r\n          </Row>\r\n        </div>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AttachmentScreenComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\success-screen\\success-screen.tsx",["399","400","401"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { Container, Image, Row, Col, Button, Modal } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./success-screen.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// Import images\r\n\r\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport success from \"../../../assets/success.svg\";\r\nimport happyRate from \"../../../assets/happyRate.svg\";\r\nimport flag from \"../../../assets/flag.svg\";\r\nimport smCloseButton from \"../../../assets/smallCloseButton.svg\";\r\nimport bigHappyRate from \"../../../assets/bigHappyRate.svg\";\r\n\r\nexport default function SuccessScreenComponent() {\r\n  const [show, setShow] = useState(true);\r\n  const { t } = useTranslation();\r\n  const history = useHistory();\r\n  const location: any = useLocation();\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [successText, setSuccessText] = useState(\r\n    \"Your application has been submitted successfully\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (location.state?.successVariable === \"payment\") {\r\n      setSuccessText(\"Payment successfully\");\r\n    }\r\n  }, [location.state?.successVariable]);\r\n\r\n  const goToWorkSapce = () => {\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <Container fluid>\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"true\"\r\n        keyboard={false}\r\n        className=\"happyRate\"\r\n      >\r\n        {/* <div className=\"smClose\">\r\n          <Image src={smCloseButton} onClick={handleClose} />\r\n        </div> */}\r\n\r\n        <div className=\"modalBody\">\r\n          <Modal.Body>\r\n            <Image src={bigHappyRate} />\r\n          </Modal.Body>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Row>\r\n        <Col className=\"succScreenContent\">\r\n          <Image src={success} />\r\n          <p className=\"successMsg\">{t(`Titles.${successText}`)}</p>\r\n          <p className=\"appNum\">\r\n            {t(\"Titles.Application number\")} : <span>#number</span>\r\n          </p>\r\n          <Button onClick={goToWorkSapce}>{t(\"Buttons.Go to workspace\")}</Button>\r\n        </Col>\r\n      </Row>\r\n      <Container className=\"successScreenFooter\">\r\n        <Row>\r\n          <span className=\"line\"> </span>\r\n          <Col className=\"leftContent\" md=\"6\" sm=\"12\">\r\n            <Row>\r\n              <Col>\r\n                <Image src={flag} />\r\n                {t(\"Titles.File a complaint\")}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <p>{t(\"Texts.if you still have any inquiries\")}</p>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col className=\"rightContent\" md=\"6\" sm=\"12\">\r\n            <Image src={happyRate} onClick={handleShow} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\pharamaceutical-establishment.tsx",["402"],"import React, { useState } from \"react\";\r\nimport { Accordion, Card, Container, Row, Image, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../redux/reducers/helper\";\r\nimport \"./pharamaceutical-establishment.scss\";\r\nimport penImage from \"../../../assets/pen.svg\";\r\nimport penImageWhite from \"../../../assets/pen-white.svg\";\r\nimport contactImage from \"../../../assets/contact.svg\";\r\nimport contactImageWhite from \"../../../assets/contact-white.svg\";\r\nimport locationImage from \"../../../assets/location.svg\";\r\nimport locationImageWhite from \"../../../assets/location-white.svg\";\r\nimport ownerImage from \"../../../assets/owner.svg\";\r\nimport ownerImageWhite from \"../../../assets/owner-white.svg\";\r\nimport checkImage from \"../../../assets/check.svg\";\r\nimport checkImageWhite from \"../../../assets/check-white.svg\";\r\nimport checked from \"../../../assets/checked.svg\";\r\n\r\nimport ContactInformationComponent from \"./contact-inforamtion/contact-information\";\r\nimport EstablishmentInformationComponent from \"./etablishment-inforamtion/establishment-information\";\r\nimport OwnerDetailComponent from \"./owner-detail/owner-detail\";\r\nimport LocationInformationComponent from \"./location-inforamtion/location-information\";\r\nimport SelfEvaluationComponent from \"./self-evaluation/self-evaluation\";\r\nimport PartnerDetailsComponent from \"./partner-details/partner-details\";\r\nimport RequestInformation from \"../../request-information/request-information\";\r\n\r\nconst PharamaceuticalEstablishmentScreen = () => {\r\n  const { t } = useTranslation();\r\n  const state = useSelector((s: StateSelectorInterface) => s.pharmaceuticalEstablishment);\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const dispatch = useDispatch();\r\n  const setCurrentStep = (step: string) => {\r\n    // set current step in global state\r\n    dispatch({\r\n      type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_STEP_NUMBER,\r\n      payload: step,\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <RequestInformation />\r\n\r\n      <Container fluid>\r\n        <Accordion activeKey={state.stepNumberReducer.toString()}>\r\n          {/* <Accordion> */}\r\n          <span className=\"column\"> </span>\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.establishmentInformationsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"0\"\r\n              onClick={() => setCurrentStep(\"0\")}\r\n            >\r\n              <Row>\r\n                <Image src={penImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={penImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.Establishment Information\")} </h3>\r\n                <Image src={checked} className=\"checked\" />\r\n                <Button className=\"start\" hidden={state.stepNumberReducer > 0}>\r\n                  {t(\"Buttons.Start\")}\r\n                </Button>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <EstablishmentInformationComponent isForReviewPage={false} />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <div className=\"divider\" />\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.contactInformationsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"1\"\r\n              onClick={() => setCurrentStep(\"1\")}\r\n            >\r\n              <Row>\r\n                <Image src={contactImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={contactImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.Contact Information\")} </h3>\r\n                <Image src={checked} className=\"checked\" />\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <ContactInformationComponent isForReviewPage={false} />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <div className=\"divider\" />\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.locationInformationsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"2\"\r\n              onClick={() => setCurrentStep(\"2\")}\r\n            >\r\n              <Row>\r\n                <Image src={locationImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={locationImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.Location Information\")} </h3>\r\n                <Image src={checked} className=\"checked\" />\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"2\">\r\n              <LocationInformationComponent isForReviewPage={false} />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <div className=\"divider\" />\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.ownerDetailsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"3\"\r\n              onClick={() => setCurrentStep(\"3\")}\r\n            >\r\n              <Row>\r\n                <Image src={ownerImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={ownerImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.Owner Details\")} </h3>\r\n                <Image src={checked} className=\"checked\" />\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"3\">\r\n              <OwnerDetailComponent isForReviewPage={false} />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <div className=\"divider\" />\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.partnerDetailsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"4\"\r\n              onClick={() => setCurrentStep(\"4\")}\r\n            >\r\n              <Row>\r\n                <Image src={ownerImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={ownerImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.Partner Details\")} </h3>\r\n                <Image src={checked} className=\"checked\" />\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"4\">\r\n              <PartnerDetailsComponent isForReviewPage={false} />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <div className=\"divider\" />\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.selfEvaluationsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"5\"\r\n              onClick={() => setCurrentStep(\"5\")}\r\n            >\r\n              <Row>\r\n                <Image src={checkImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={checkImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.Self Evaluation\")} </h3>\r\n                <Image src={checked} className=\"checked\" />\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"5\">\r\n              <SelfEvaluationComponent />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PharamaceuticalEstablishmentScreen;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\payment-screen\\payment-screen.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\relocation-license-screen\\relocation-license-screen.tsx",["403","404"],"import React from \"react\";\r\nimport { Accordion, Card, Container, Row, Image, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../redux/reducers/helper\";\r\nimport \"./relocation-license-screen.scss\";\r\nimport \"../pharamaceutical-establishment-screen/shared/shared.scss\";\r\n\r\n// Import images\r\nimport locationImage from \"../../../assets/location.svg\";\r\nimport locationImageWhite from \"../../../assets/location-white.svg\";\r\n\r\nimport contactImage from \"../../../assets/contact.svg\";\r\nimport contactImageWhite from \"../../../assets/contact-white.svg\";\r\nimport checked from \"../../../assets/checked.svg\";\r\nimport checkImage from \"../../../assets/check.svg\";\r\nimport checkImageWhite from \"../../../assets/check-white.svg\";\r\n\r\nimport LocationInformationComponent from \"./location-inforamtion/location-information\";\r\nimport SelfEvaluationComponent from \"../pharamaceutical-establishment-screen/self-evaluation/self-evaluation\";\r\nimport RequestInformation from \"../../request-information/request-information\";\r\n\r\nconst RelocationLicenseScreen = () => {\r\n  const { t } = useTranslation();\r\n  const state = useSelector((s: StateSelectorInterface) => s.pharmaceuticalEstablishment);\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const dispatch = useDispatch();\r\n  const setCurrentStep = (step: string) => {\r\n    // set current step in global state\r\n    dispatch({\r\n      type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_STEP_NUMBER,\r\n      payload: step,\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <RequestInformation />\r\n\r\n      <Container fluid>\r\n        <Accordion activeKey={state.stepNumberReducer.toString()}>\r\n          {/* <Accordion> */}\r\n          <span className=\"column\"> </span>\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.establishmentInformationsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"0\"\r\n              onClick={() => setCurrentStep(\"0\")}\r\n            >\r\n              <Row>\r\n                <Image src={locationImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={locationImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.New Location Information\")}</h3>\r\n                <Image src={checked} className=\"checked\" />\r\n                <Button className=\"start\" hidden={state.stepNumberReducer > 0}>\r\n                  {t(\"Buttons.Start\")}\r\n                </Button>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <LocationInformationComponent isForReviewPage={false} />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <div className=\"divider\" />\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.contactInformationsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"1\"\r\n              onClick={() => setCurrentStep(\"1\")}\r\n            >\r\n              <Row>\r\n                <Image src={checkImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={checkImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">{t(\"Titles.Self Evaluation\")} </h3>\r\n                <Image src={checked} className=\"checked\" />\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <SelfEvaluationComponent />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelocationLicenseScreen;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\add-area-extention\\add-area-extention.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\speciality\\speciality.tsx",["405","406","407","408"],"import React from \"react\";\r\nimport { Accordion, Card, Container, Row, Image, Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../redux/reducers/helper\";\r\nimport \"./speciality.scss\";\r\nimport \"../pharamaceutical-establishment-screen/shared/shared.scss\";\r\n\r\n// Import images\r\nimport expand from \"../../../assets/expand-arrows-alt-solid.svg\";\r\n// import locationImageWhite from \"../../../assets/location-white.svg\";\r\n\r\nimport checked from \"../../../assets/checked.svg\";\r\nimport checkImage from \"../../../assets/check.svg\";\r\nimport checkImageWhite from \"../../../assets/check-white.svg\";\r\nimport ownerImage from \"../../../assets/owner.svg\";\r\nimport ownerImageWhite from \"../../../assets/owner-white.svg\";\r\n\r\nimport RemoveSpeciality from \"./remove-speciality/remove-speciality\";\r\nimport SelfEvaluationComponent from \"../pharamaceutical-establishment-screen/self-evaluation/self-evaluation\";\r\nimport RequestInformation from \"../../request-information/request-information\";\r\n\r\nconst Speciality = () => {\r\n  const { t }: { t: any } = useTranslation();\r\n  const state = useSelector((s: StateSelectorInterface) => s.pharmaceuticalEstablishment);\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const dispatch = useDispatch();\r\n  const setCurrentStep = (step: string) => {\r\n    // set current step in global state\r\n    dispatch({\r\n      type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_STEP_NUMBER,\r\n      payload: step,\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <RequestInformation />\r\n\r\n      <Container fluid>\r\n        <Accordion activeKey={state.stepNumberReducer.toString()}>\r\n          {/* <Accordion> */}\r\n          <span className=\"column\"> </span>\r\n          <Card className=\"headCard\">\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className={state.establishmentInformationsReducer.isComplete ? \"done\" : \"\"}\r\n              eventKey=\"0\"\r\n              onClick={() => setCurrentStep(\"0\")}\r\n            >\r\n              <Row>\r\n                <Image src={ownerImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <Image src={ownerImageWhite} className=\"ml-3 mr-4 whiteIc\" />\r\n                <h3 className=\"text-success\">  {t(\"Titles.Remove Specialty\")}</h3>\r\n                <Image src={checked} className=\"checked\" />\r\n                <Button className=\"start\" hidden={state.stepNumberReducer > 0}>\r\n                  {t(\"Buttons.Start\")}\r\n                </Button>\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <RemoveSpeciality isForReviewPage={false} />\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Speciality;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\partner-details\\add-partner\\add-partner.tsx",["409","410"],"import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Image, Card, Col, Container, Form, Row, Button } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FormInputsInterface, formSchema } from \"./add-partner-helper\";\r\nimport \"./add-partner.scss\";\r\nimport \"../../shared/shared.scss\";\r\n\r\n// Import images\r\nimport userPhoto from \"../../../../../assets/userPhoto.svg\";\r\nimport upload from \"../../../../../assets/upload.svg\";\r\nimport email from \"../../../../../assets/mail.svg\";\r\nimport phone from \"../../../../../assets/phone.svg\";\r\nimport arrow from \"../../../../../assets/arrow-white.svg\";\r\nimport { ActionTypes } from \"../../../../../redux/reducers/helper\";\r\nimport SaveAndCancel from \"../../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\nimport AttachmentComponent from \"../../../../templates/attachment/attachment\";\r\n\r\nconst AddPartnerComponent = (props: { closeModal: any }) => {\r\n  const { t }: { t: any } = useTranslation();\r\n  const history = useHistory();\r\n  const { register, handleSubmit, errors, formState } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (data: FormInputsInterface) => {\r\n    if (formState.isValid) {\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.Add_New_PARTNER,\r\n        payload: data,\r\n      });\r\n      props.closeModal();\r\n    }\r\n  };\r\n  const closeModalHandler = () => {\r\n    // pass this event to parent to close the modal\r\n    props.closeModal();\r\n  };\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Container fluid>\r\n      <Card className=\"add-partner\">\r\n        <Card.Body className=\"model-card\">\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Form.Row>\r\n              <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                <Form.Label>\r\n                  {t(\"Titles.Retrieve information contact from your profile\")}\r\n                </Form.Label>\r\n                <div className=\"radioButtons\">\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"getContactData\">\r\n                      <input\r\n                        name=\"getContactData\"\r\n                        type=\"radio\"\r\n                        id=\"getContactData\"\r\n                        className=\"form-check-input\"\r\n                        value=\"yes\"\r\n                        ref={register}\r\n                      />\r\n                      {t(\"Forms.Yes\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"getContactData2\">\r\n                      <input\r\n                        name=\"getContactData\"\r\n                        type=\"radio\"\r\n                        id=\"getContactData2\"\r\n                        className=\"form-check-input\"\r\n                        value=\"no\"\r\n                        ref={register}\r\n                        defaultChecked\r\n                      />\r\n                      {t(\"Forms.No\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Row>\r\n              <Col md={4}>\r\n                <Form.Group controlId=\"formGridEmail\" className=\"uploadPhoto\">\r\n                  <Image src={userPhoto} />\r\n                  <Button variant=\"success\">\r\n                    <Image src={upload} /> {t(\"Forms.Upload\")}\r\n                  </Button>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={4}>\r\n                <Form.Group controlId=\"formGridEmail\">\r\n                  <Form.Label>\r\n                    {t(\"Forms.Title\")} <span className=\"required\">*</span>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    name=\"tite\"\r\n                    ref={register}\r\n                    isValid={formState.touched.tite && !errors.tite}\r\n                    isInvalid={errors.tite}\r\n                  >\r\n                    <option disabled selected value=\"\">\r\n                      {t(\"Forms.Title\")}\r\n                    </option>\r\n                    <option>...</option>\r\n                    <option>...</option>\r\n                    <option>...</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={4}>\r\n                <Form.Group controlId=\"formGridEmail\">\r\n                  <Form.Label>\r\n                    {t(\"Forms.Gender\")} <span className=\"required\">*</span>\r\n                  </Form.Label>\r\n                  <div className=\"radioButtons\">\r\n                    <div className=\"form-check\">\r\n                      <label htmlFor=\"gender\">\r\n                        <input\r\n                          name=\"gender\"\r\n                          type=\"radio\"\r\n                          id=\"gender\"\r\n                          className=\"form-check-input\"\r\n                          value=\"male\"\r\n                          ref={register}\r\n                        />\r\n                        {t(\"Forms.Male\")}\r\n                        <i className=\"checkMark\"> </i>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"form-check\">\r\n                      <label htmlFor=\"gender2\">\r\n                        <input\r\n                          name=\"gender\"\r\n                          type=\"radio\"\r\n                          id=\"gender2\"\r\n                          className=\"form-check-input\"\r\n                          value=\"female\"\r\n                          ref={register}\r\n                          defaultChecked\r\n                        />\r\n                        {t(\"Forms.Female\")}\r\n                        <i className=\"checkMark\"> </i>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridEmail\">\r\n                <Form.Label>\r\n                  {t(\"Forms.First name\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.First name\")}\r\n                  name=\"fName\"\r\n                  ref={register}\r\n                  isValid={formState.touched.fName && !errors.fName}\r\n                  isInvalid={errors.fName}\r\n                />\r\n                {errors.fName ? (\r\n                  <span className=\"text-danger\">{t(`${errors.fName?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Middle name\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Middle name\")}\r\n                  name=\"mName\"\r\n                  ref={register}\r\n                  isValid={formState.touched.mName && !errors.mName}\r\n                  isInvalid={errors.mName}\r\n                />\r\n                {errors.mName ? (\r\n                  <span className=\"text-danger\">{t(`${errors.mName?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Last name\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Last name\")}\r\n                  name=\"lName\"\r\n                  ref={register}\r\n                  isValid={formState.touched.lName && !errors.lName}\r\n                  isInvalid={errors.lName}\r\n                />\r\n                {errors.lName ? (\r\n                  <span className=\"text-danger\">{t(`${errors.lName?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridEmail\">\r\n                <Form.Label>\r\n                  {t(\"Forms.First name (Arabic)\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.First name (Arabic)\")}\r\n                  name=\"fNameAr\"\r\n                  ref={register}\r\n                  isValid={formState.touched.fNameAr && !errors.fNameAr}\r\n                  isInvalid={errors.fNameAr}\r\n                />\r\n                {errors.fNameAr ? (\r\n                  <span className=\"text-danger\">{t(`${errors.fNameAr?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Middle name (Arabic)\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Middle name (Arabic)\")}\r\n                  name=\"mNameAr\"\r\n                  ref={register}\r\n                  isValid={formState.touched.mNameAr && !errors.mNameAr}\r\n                  isInvalid={errors.mNameAr}\r\n                />\r\n                {errors.mNameAr ? (\r\n                  <span className=\"text-danger\">{t(`${errors.mNameAr?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Last Name (Arabic)\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Last Name (Arabic)\")}\r\n                  name=\"lNameAr\"\r\n                  ref={register}\r\n                  isValid={formState.touched.lNameAr && !errors.lNameAr}\r\n                  isInvalid={errors.lNameAr}\r\n                />\r\n                {errors.lNameAr ? (\r\n                  <span className=\"text-danger\">{t(`${errors.lNameAr?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Share Percentage\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  placeholder=\"50%\"\r\n                  name=\"sharePercentage\"\r\n                  ref={register}\r\n                  isValid={formState.touched.sharePercentage && !errors.sharePercentage}\r\n                  isInvalid={errors.sharePercentage}\r\n                />\r\n                {errors.sharePercentage ? (\r\n                  <span className=\"text-danger\">{t(`${errors.sharePercentage?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.UAE Citzen\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <div className=\"radioButtons\">\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"UAECitzen\">\r\n                      <input\r\n                        name=\"uaeCitzen\"\r\n                        type=\"radio\"\r\n                        id=\"UAECitzen\"\r\n                        className=\"form-check-input\"\r\n                        value=\"yes\"\r\n                        ref={register}\r\n                        defaultChecked\r\n                      />\r\n                      {t(\"Forms.Yes\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"UAECitzen2\">\r\n                      <input\r\n                        name=\"uaeCitzen\"\r\n                        type=\"radio\"\r\n                        id=\"UAECitzen2\"\r\n                        className=\"form-check-input\"\r\n                        value=\"no\"\r\n                        ref={register}\r\n                      />\r\n                      {t(\"Forms.No\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridState\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Nationality\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  name=\"nationality\"\r\n                  ref={register}\r\n                  isValid={formState.touched.nationality && !errors.nationality}\r\n                  isInvalid={errors.nationality}\r\n                >\r\n                  <option disabled selected value=\"\">\r\n                    {t(\"Forms.Nationality\")}\r\n                  </option>\r\n                  <option>...</option>\r\n                  <option>...</option>\r\n                  <option>...</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Passport No\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.No\")}\r\n                  name=\"passportNo\"\r\n                  ref={register}\r\n                  isValid={formState.touched.passportNo && !errors.passportNo}\r\n                  isInvalid={errors.passportNo}\r\n                />\r\n                {errors.passportNo ? (\r\n                  <span className=\"text-danger\">{t(`${errors.passportNo?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Emirates ID\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Emirates ID\")}\r\n                  name=\"emiratesId\"\r\n                  ref={register}\r\n                  isValid={formState.touched.emiratesId && !errors.emiratesId}\r\n                  isInvalid={errors.emiratesId}\r\n                />\r\n                {errors.emiratesId ? (\r\n                  <span className=\"text-danger\">{t(`${errors.emiratesId?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Family Book No\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.No\")}\r\n                  name=\"familyBookNo\"\r\n                  ref={register}\r\n                  isValid={formState.touched.familyBookNo && !errors.familyBookNo}\r\n                  isInvalid={errors.familyBookNo}\r\n                />\r\n                {errors.familyBookNo ? (\r\n                  <span className=\"text-danger\">{t(`${errors.familyBookNo?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row className=\"splitTitle\">\r\n              <h5>{t(\"Forms.Contact information\")}</h5>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridEmail\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Contact Number\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <div className=\"inputWithIcon\">\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Forms.Contact Number\")}\r\n                    name=\"contactNo\"\r\n                    ref={register}\r\n                    isValid={formState.touched.contactNo && !errors.contactNo}\r\n                    isInvalid={errors.contactNo}\r\n                  />\r\n                  {errors.contactNo ? (\r\n                    <span className=\"text-danger\">{t(`${errors.contactNo?.message}`)}</span>\r\n                  ) : null}\r\n                  <Image src={phone} />\r\n                </div>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Primary Email\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <div className=\"inputWithIcon\">\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Forms.Primary Email\")}\r\n                    name=\"primaryEmail\"\r\n                    ref={register}\r\n                    isValid={formState.touched.primaryEmail && !errors.primaryEmail}\r\n                    isInvalid={errors.primaryEmail}\r\n                  />\r\n                  {errors.primaryEmail ? (\r\n                    <span className=\"text-danger\">{t(`${errors.primaryEmail?.message}`)}</span>\r\n                  ) : null}\r\n                  <Image src={email} />\r\n                </div>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row className=\"splitTitle\">\r\n              <h5>{t(\"Buttons.Attachments\")}</h5>\r\n            </Form.Row>\r\n            <AttachmentComponent withslidercarosel={false} />\r\n            <div className=\"model-fixed-footer\">\r\n              <SaveAndCancel customText={t(\"Buttons.Add\")} onCancel={closeModalHandler} />\r\n            </div>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AddPartnerComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\molecules\\sticky-info\\sticky-info.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\index.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\index.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\partner-details\\add-partner\\add-partner-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\partner-details\\partner-details.tsx",["411","412","413","414","415"],"import React, { useState } from \"react\";\r\nimport { Image, Card, Table, Container, Row, Modal, Button, Form } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport \"./partner-details.scss\";\r\nimport \"../shared/shared.scss\";\r\nimport AddPartnerComponent from \"./add-partner/add-partner\";\r\n\r\n// Import images\r\nimport add from \"../../../../assets/add.svg\";\r\nimport leftArrow from \"../../../../assets/leftArrow.svg\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../../redux/reducers/helper\";\r\nimport { IProps } from \"../shared/components-props\";\r\nimport SaveAndCancel from \"../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\nimport addMore from \"../../../../assets/addMore.svg\";\r\nimport edit from \"../../../../assets/editPen.svg\";\r\nimport remove from \"../../../../assets/deleteIconInCircle.png\";\r\n\r\nconst PartnerDetailsComponent = (props: IProps) => {\r\n  const { t } = useTranslation();\r\n  const [show, setShow] = useState(false);\r\n\r\n  const { data } = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.partnerDetailsReducer\r\n  );\r\n\r\n  const changeParentToggleEvent = () => {\r\n    if (props.isForReviewPage) {\r\n      props.onSubmitOrCancelEvent();\r\n    }\r\n  };\r\n  const { register, handleSubmit } = useForm();\r\n\r\n  const onCancelHandler = () => changeParentToggleEvent();\r\n\r\n  const onCloseModal = () => setShow(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = () => {\r\n    // set step is complete without add any data\r\n    dispatch({\r\n      type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PARTNER_DETAILS,\r\n    });\r\n    // move to next step\r\n    dispatch({\r\n      type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n    });\r\n    // set progress bar  +10 %\r\n    dispatch({\r\n      type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PROGRESS_PERSENTAGE,\r\n      payload: 10,\r\n    });\r\n    changeParentToggleEvent();\r\n  };\r\n\r\n  const removeFromTable = (index) => {\r\n    dispatch({\r\n      type: ActionTypes.PharmaceuticalEstablishmentActionTypes.Remove_New_PARTNER,\r\n      payload: index,\r\n    });\r\n  };\r\n\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Container fluid>\r\n      <Card>\r\n        <Card.Body>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Row hidden={props.isForReviewPage}>\r\n              <div className=\"addpartnerBtn\">\r\n                <Image src={add} onClick={() => setShow(!show)} />\r\n                <p> {t(\"Forms.Add Partner\")}</p>\r\n              </div>\r\n            </Row>\r\n            <Modal\r\n              scrollable={true}\r\n              show={show}\r\n              onHide={() => setShow(!show)}\r\n              backdrop=\"static\"\r\n              keyboard={false}\r\n              className=\"fullScreenModal\"\r\n            >\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                  <div className=\"back\">\r\n                    <Image src={leftArrow} onClick={() => setShow(!show)} />\r\n                  </div>\r\n                  <div className=\"title\">\r\n                    <h1> {t(\"Forms.Add New Partner\")}</h1>\r\n                  </div>\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <AddPartnerComponent closeModal={onCloseModal} />\r\n              </Modal.Body>\r\n            </Modal>\r\n\r\n            <Row className=\"tableParent\">\r\n              <Table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>{t(\"Forms.Full Name_EN\")}</th>\r\n                    <th>{t(\"Forms.Full Name_AR\")}</th>\r\n                    <th>{t(\"Forms.Emirates ID\")}</th>\r\n                    <th>{t(\"Forms.Passport NO\")}</th>\r\n                    <th>{t(\"Forms.Nationality\")}</th>\r\n                    <th> </th>\r\n                    <th> </th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {data.map((row) => (\r\n                    <tr key={row.passportNo}>\r\n                      <td>{row.fName}</td>\r\n                      <td> {row.fNameAr}</td>\r\n                      <td> {row.emiratesId}</td>\r\n                      <td> {row.passportNo}</td>\r\n                      <td> {row.nationality}</td>\r\n                      <td>\r\n                        <Image src={edit} />\r\n                      </td>\r\n                      <td>\r\n                        <Image src={edit} onClick={(e) => removeFromTable(row.passportNo)} />\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </Row>\r\n\r\n            {props.isForReviewPage ? (\r\n              // <SaveAndCancel onCancel={onCancelHandler} />\r\n              <Row className=\"addMore\" onClick={() => setShow(!show)}>\r\n                <Image src={addMore} />\r\n                {t(\"Titles.Click here to add more Partner\")}\r\n              </Row>\r\n            ) : (\r\n              /// temp since submiss btn not has a click event\r\n              <NextButton />\r\n            )}\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PartnerDetailsComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\etablishment-inforamtion\\establishment-information.tsx",["416","417","418"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Card, Col, Form, Image, Row } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../../redux/reducers/helper\";\r\nimport { FormInputsInterface, formSchema } from \"./establishment-information-helper\";\r\nimport \"./establishment-information.scss\";\r\nimport { IProps } from \"../shared/components-props\";\r\nimport SaveAndCancel from \"../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\n\r\nconst EstablishmentInformationComponent = (props: IProps) => {\r\n  // the problem here is that placeholders can't accept tfunction , it accept strings only\r\n  const { t }: { t: any } = useTranslation();\r\n\r\n  const { data } = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.establishmentInformationsReducer\r\n  );\r\n\r\n  const { register, handleSubmit, errors, formState, reset } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n  const changeParentToggleEvent = () => {\r\n    if (props.isForReviewPage) {\r\n      props.onSubmitOrCancelEvent();\r\n    }\r\n  };\r\n\r\n  const onCancelHandler = () => changeParentToggleEvent();\r\n\r\n  useEffect(() => {\r\n    // bind inputs values with it's state\r\n    // this will be very helpfull when we want reuse the component with its values\r\n    reset(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reset]);\r\n\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (values: FormInputsInterface) => {\r\n    if (formState.isValid) {\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_ESTABLISHMENT_INFORMATION,\r\n        payload: values,\r\n      });\r\n      // move to next step\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n      });\r\n      // set progress bar  +10 %\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PROGRESS_PERSENTAGE,\r\n        payload: 10,\r\n      });\r\n      changeParentToggleEvent();\r\n    }\r\n  };\r\n\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Card className=\"estaplishmentInformation\">\r\n      <Card.Body>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Establishment Name\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Establishment Name\")}\r\n                name=\"establishmentName\"\r\n                ref={register}\r\n                isValid={formState.touched.establishmentName && !errors.establishmentName}\r\n                isInvalid={errors.establishmentName}\r\n              />\r\n              {errors.establishmentName ? (\r\n                <span className=\"text-danger\">{t(`${errors.establishmentName?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n              <Form.Label>\r\n                {t(\"Forms.Establishment Name (Arabic)\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Establishment Name (Arabic)\")}\r\n                name=\"establishmentNameArabic\"\r\n                ref={register}\r\n                isValid={\r\n                  formState.touched.establishmentNameArabic && !errors.establishmentNameArabic\r\n                }\r\n                isInvalid={errors.establishmentNameArabic}\r\n              />\r\n              {errors.establishmentNameArabic ? (\r\n                <span className=\"text-danger\">\r\n                  {t(`${errors.establishmentNameArabic?.message}`)}\r\n                </span>\r\n              ) : null}\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridState\">\r\n              <Form.Label>\r\n                {t(\"Forms.Establishment Type\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"establishmentType\"\r\n                ref={register}\r\n                isValid={formState.touched.establishmentType && !errors.establishmentType}\r\n                isInvalid={errors.establishmentType}\r\n              >\r\n                <option disabled selected value=\"\">\r\n                  {t(\"Forms.Establishment Type\")}\r\n                </option>\r\n                <option> Establishment Type 1</option>\r\n                <option> Establishment Type 2</option>\r\n                <option> Establishment Type 3</option>\r\n              </Form.Control>\r\n              {errors.establishmentType ? (\r\n                <span className=\"text-danger\">{t(`${errors.establishmentType?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridState\">\r\n              <Form.Label>\r\n                {t(\"Forms.Category\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"Category\"\r\n                ref={register}\r\n                isValid={formState.touched.Category && !errors.Category}\r\n                isInvalid={errors.Category}\r\n              >\r\n                <option disabled selected value=\"\">\r\n                  {t(\"Forms.Category\")}\r\n                </option>\r\n                <option>Category 1 </option>\r\n                <option>Category 2 </option>\r\n                <option>Category 3 </option>\r\n              </Form.Control>\r\n              {errors.Category ? (\r\n                <span className=\"text-danger\">{t(`${errors.Category?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n          </Form.Row>\r\n          {props.isForReviewPage ? <SaveAndCancel onCancel={onCancelHandler} /> : <NextButton />}\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EstablishmentInformationComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\contact-inforamtion\\contact-information.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\location-inforamtion\\location-information.tsx",["419","420","421","422"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Card, Col, Container, Form, Image, Row } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { FormInputsInterface, formSchema } from \"./location-information-helper\";\r\nimport arrow from \"../../../../assets/arrow-white.svg\";\r\nimport map from \"../../../../assets/map.svg\";\r\n\r\nimport \"./location-information.scss\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../../redux/reducers/helper\";\r\nimport { IProps } from \"../shared/components-props\";\r\nimport SaveAndCancel from \"../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\n\r\nconst LocationInformationComponent = (props: IProps) => {\r\n  const { t }: { t: any } = useTranslation();\r\n  const { data } = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.locationInformationsReducer\r\n  );\r\n\r\n  const { register, handleSubmit, errors, formState, reset } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n  const changeParentToggleEvent = () => {\r\n    if (props.isForReviewPage) {\r\n      props.onSubmitOrCancelEvent();\r\n    }\r\n  };\r\n  const onCancelHandler = () => changeParentToggleEvent();\r\n\r\n  useEffect(() => {\r\n    // bind inputs values with it's state\r\n    // this will be very helpfull when we want reuse the component with its values\r\n    reset(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reset]);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (values: FormInputsInterface) => {\r\n    if (formState.isValid) {\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_LOACTION_INFORMATION,\r\n        payload: values,\r\n      });\r\n      // move to next step\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n      });\r\n      // set progress bar  +10 %\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PROGRESS_PERSENTAGE,\r\n        payload: 10,\r\n      });\r\n      changeParentToggleEvent();\r\n    }\r\n  };\r\n\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Card>\r\n      <Card.Body>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridState\">\r\n              <Form.Label>\r\n                {t(\"Forms.Emirate\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"emirate\"\r\n                ref={register}\r\n                isValid={formState.touched.emirate && !errors.emirate}\r\n                isInvalid={errors.emirate}\r\n              >\r\n                <option disabled selected value=\"\">\r\n                  {t(\"Forms.Emirate\")}\r\n                </option>\r\n                <option> Type 1</option>\r\n                <option> Type 2</option>\r\n                <option> Type 3</option>\r\n              </Form.Control>\r\n              {\r\n                errors.emirate ? <span className=\"text-danger\">{t(`${errors.emirate?.message}`)}</span> : null\r\n              }\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n              <Form.Label>\r\n                {t(\"Forms.Area\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Area\")}\r\n                name=\"area\"\r\n                ref={register}\r\n                isValid={formState.touched.area && !errors.area}\r\n                isInvalid={errors.area}\r\n              />\r\n              {\r\n                errors.area ? <span className=\"text-danger\">{t(`${errors.area?.message}`)}</span> : null\r\n              }\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Street\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Street\")}\r\n                name=\"street\"\r\n                ref={register}\r\n                isValid={formState.touched.street && !errors.street}\r\n                isInvalid={errors.street}\r\n              />\r\n              {\r\n                errors.street ? <span className=\"text-danger\">{t(`${errors.street?.message}`)}</span> : null\r\n              }\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Po Box\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Po Box\")}\r\n                name=\"poBox\"\r\n                ref={register}\r\n                isValid={formState.touched.poBox && !errors.poBox}\r\n                isInvalid={errors.poBox}\r\n              />\r\n              {\r\n                errors.poBox ? <span className=\"text-danger\">{t(`${errors.poBox?.message}`)}</span> : null\r\n              }\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Building Name\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Building Name\")}\r\n                name=\"buildingName\"\r\n                ref={register}\r\n                isValid={formState.touched.buildingName && !errors.buildingName}\r\n                isInvalid={errors.buildingName}\r\n              />\r\n              {\r\n                errors.buildingName ? <span className=\"text-danger\">{t(`${errors.buildingName?.message}`)}</span> : null\r\n              }\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Building No\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Building No\")}\r\n                name=\"buildingNo\"\r\n                ref={register}\r\n                isValid={formState.touched.buildingNo && !errors.buildingNo}\r\n                isInvalid={errors.buildingNo}\r\n              />\r\n              {\r\n                errors.buildingNo ? <span className=\"text-danger\">{t(`${errors.buildingNo?.message}`)}</span> : null\r\n              }\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Google Map Url\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n\r\n              <div className=\"inputWithIcon\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Google Map Url\")}\r\n                  name=\"mapUrl\"\r\n                  ref={register}\r\n                  isValid={formState.touched.mapUrl && !errors.mapUrl}\r\n                  isInvalid={errors.mapUrl}\r\n                />\r\n                <Image src={map} />\r\n              </div>\r\n              {\r\n                errors.mapUrl ? <span className=\"text-danger\">{t(`${errors.mapUrl?.message}`)}</span> : null\r\n              }\r\n            </Form.Group>\r\n          </Form.Row>\r\n          {props.isForReviewPage ? <SaveAndCancel onCancel={onCancelHandler} /> : <NextButton />}\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default LocationInformationComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\owner-detail\\owner-detail.tsx",["423"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Image, Card, Col, Container, Form, Row, Button } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { FormInputsInterface, formSchema } from \"./owner-detail-helper\";\r\nimport \"./owner-detail.scss\";\r\nimport \"../shared/shared.scss\";\r\n\r\n// Import images\r\nimport userPhoto from \"../../../../assets/userPhoto.svg\";\r\nimport upload from \"../../../../assets/upload.svg\";\r\nimport email from \"../../../../assets/mail.svg\";\r\nimport phone from \"../../../../assets/phone.svg\";\r\nimport arrow from \"../../../../assets/arrow-white.svg\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../../redux/reducers/helper\";\r\nimport AttachmentComponent from \"../../../templates/attachment/attachment\";\r\nimport { IProps } from \"../shared/components-props\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\nimport SaveAndCancel from \"../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\n\r\nconst OwnerDetailComponent = (props: IProps) => {\r\n  const { t }: { t: any } = useTranslation();\r\n  const { data } = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.ownerDetailsReducer\r\n  );\r\n\r\n  const { register, handleSubmit, errors, formState, reset } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n  const changeParentToggleEvent = () => {\r\n    if (props.isForReviewPage) {\r\n      props.onSubmitOrCancelEvent();\r\n    }\r\n  };\r\n  const onCancelHandler = () => changeParentToggleEvent();\r\n\r\n  useEffect(() => {\r\n    // bind inputs values with it's state\r\n    // this will be very helpfull when we want reuse the component with its values\r\n    reset(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reset]);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (values: FormInputsInterface) => {\r\n    if (formState.isValid) {\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_OWNER_DETAILS,\r\n        payload: values,\r\n      });\r\n      // move to next step\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n      });\r\n      // set progress bar  +10 %\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PROGRESS_PERSENTAGE,\r\n        payload: 10,\r\n      });\r\n      changeParentToggleEvent();\r\n    }\r\n  };\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Container fluid>\r\n      <Card className=\"owner-details\">\r\n        <Card.Body>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Form.Row>\r\n              <Form.Group as={Col}>\r\n                <Form.Label>\r\n                  {t(\"Titles.Retrieve information contact from your profile\")}\r\n                </Form.Label>\r\n                <div className=\"radioButtons\">\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"getContactData\">\r\n                      <input\r\n                        name=\"getInfoFromProfile\"\r\n                        type=\"radio\"\r\n                        id=\"getContactData\"\r\n                        className=\"form-check-input\"\r\n                        value=\"yes\"\r\n                        ref={register}\r\n                        defaultChecked\r\n                      />\r\n                      {t(\"Forms.Yes\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"getContactData2\">\r\n                      <input\r\n                        name=\"getInfoFromProfile\"\r\n                        type=\"radio\"\r\n                        id=\"getContactData2\"\r\n                        className=\"form-check-input\"\r\n                        value=\"no\"\r\n                        ref={register}\r\n                      />\r\n                      {t(\"Forms.No\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Row>\r\n              <Col md={4}>\r\n                <Form.Group controlId=\"formGridEmail\" className=\"uploadPhoto\">\r\n                  <Image src={userPhoto} />\r\n                  <Button variant=\"success\">\r\n                    <Image src={upload} /> {t(\"Forms.Upload\")}\r\n                  </Button>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={4}>\r\n                <Form.Group controlId=\"formGridEmail\">\r\n                  <Form.Label>\r\n                    {t(\"Forms.Title\")} <span className=\"required\">*</span>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    name=\"tite\"\r\n                    ref={register}\r\n                    isValid={formState.touched.tite && !errors.tite}\r\n                    isInvalid={errors.tite}\r\n                  >\r\n                    <option disabled selected value=\"\">\r\n                      {t(\"Forms.Title\")}\r\n                    </option>\r\n                    <option>...</option>\r\n                    <option>...</option>\r\n                    <option>...</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col md={4}>\r\n                <Form.Group>\r\n                  <Form.Label>\r\n                    {t(\"Forms.Gender\")} <span className=\"required\">*</span>\r\n                  </Form.Label>\r\n                  <div className=\"radioButtons\">\r\n                    <div className=\"form-check\">\r\n                      <label htmlFor=\"gender\">\r\n                        <input\r\n                          name=\"gender\"\r\n                          type=\"radio\"\r\n                          id=\"gender\"\r\n                          className=\"form-check-input\"\r\n                          value=\"male\"\r\n                          ref={register}\r\n                        />\r\n                        {t(\"Forms.Male\")}\r\n                        <i className=\"checkMark\"> </i>\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"form-check\">\r\n                      <label htmlFor=\"gender2\">\r\n                        <input\r\n                          name=\"gender\"\r\n                          type=\"radio\"\r\n                          id=\"gender2\"\r\n                          className=\"form-check-input\"\r\n                          value=\"female\"\r\n                          ref={register}\r\n                          defaultChecked\r\n                        />\r\n                        {t(\"Forms.Female\")}\r\n                        <i className=\"checkMark\"> </i>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridEmail\">\r\n                <Form.Label>\r\n                  {t(\"Forms.First name\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.First name\")}\r\n                  name=\"fName\"\r\n                  ref={register}\r\n                  isValid={formState.touched.fName && !errors.fName}\r\n                  isInvalid={errors.fName}\r\n                />\r\n                {errors.fName ? (\r\n                  <span className=\"text-danger\">{t(`${errors.fName?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Middle name\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Middle name\")}\r\n                  name=\"mName\"\r\n                  ref={register}\r\n                  isValid={formState.touched.mName && !errors.mName}\r\n                  isInvalid={errors.mName}\r\n                />\r\n                {errors.mName ? (\r\n                  <span className=\"text-danger\">{t(`${errors.mName?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Last name\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Last name\")}\r\n                  name=\"lName\"\r\n                  ref={register}\r\n                  isValid={formState.touched.lName && !errors.lName}\r\n                  isInvalid={errors.lName}\r\n                />\r\n                {errors.lName ? (\r\n                  <span className=\"text-danger\">{t(`${errors.lName?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridEmail\">\r\n                <Form.Label>\r\n                  {t(\"Forms.First name (Arabic)\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.First name (Arabic)\")}\r\n                  name=\"fNameAr\"\r\n                  ref={register}\r\n                  isValid={formState.touched.fNameAr && !errors.fNameAr}\r\n                  isInvalid={errors.fNameAr}\r\n                />\r\n                {errors.fNameAr ? (\r\n                  <span className=\"text-danger\">{t(`${errors.fNameAr?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Middle name (Arabic)\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Middle name (Arabic)\")}\r\n                  name=\"mNameAr\"\r\n                  ref={register}\r\n                  isValid={formState.touched.mNameAr && !errors.mNameAr}\r\n                  isInvalid={errors.mNameAr}\r\n                />\r\n                {errors.mNameAr ? (\r\n                  <span className=\"text-danger\">{t(`${errors.mNameAr?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Last Name (Arabic)\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Last Name (Arabic)\")}\r\n                  name=\"lNameAr\"\r\n                  ref={register}\r\n                  isValid={formState.touched.lNameAr && !errors.lNameAr}\r\n                  isInvalid={errors.lNameAr}\r\n                />\r\n                {errors.lNameAr ? (\r\n                  <span className=\"text-danger\">{t(`${errors.lNameAr?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Share Percentage\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  placeholder=\"50%\"\r\n                  name=\"sharePercentage\"\r\n                  ref={register}\r\n                  isValid={formState.touched.sharePercentage && !errors.sharePercentage}\r\n                  isInvalid={errors.sharePercentage}\r\n                />\r\n                {errors.sharePercentage ? (\r\n                  <span className=\"text-danger\">{t(`${errors.sharePercentage?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n              <Form.Group as={Col} controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.UAE Citzen\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <div className=\"radioButtons\">\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"UAECitzen\">\r\n                      <input\r\n                        name=\"uaeCitzen\"\r\n                        type=\"radio\"\r\n                        id=\"UAECitzen\"\r\n                        className=\"form-check-input\"\r\n                        value=\"yes\"\r\n                        ref={register}\r\n                        defaultChecked\r\n                      />\r\n                      {t(\"Forms.Yes\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"form-check\">\r\n                    <label htmlFor=\"UAECitzen2\">\r\n                      <input\r\n                        name=\"uaeCitzen\"\r\n                        type=\"radio\"\r\n                        id=\"UAECitzen2\"\r\n                        className=\"form-check-input\"\r\n                        value=\"no\"\r\n                        ref={register}\r\n                      />\r\n                      {t(\"Forms.No\")}\r\n                      <i className=\"checkMark\"> </i>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </Form.Group>\r\n            </Form.Row>\r\n\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridState\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Nationality\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  name=\"nationality\"\r\n                  ref={register}\r\n                  isValid={formState.touched.nationality && !errors.nationality}\r\n                  isInvalid={errors.nationality}\r\n                >\r\n                  <option disabled selected value=\"\">\r\n                    {t(\"Forms.Nationality\")}\r\n                  </option>\r\n                  <option>...</option>\r\n                  <option>...</option>\r\n                  <option>...</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Passport No\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.No\")}\r\n                  name=\"passportNo\"\r\n                  ref={register}\r\n                  isValid={formState.touched.passportNo && !errors.passportNo}\r\n                  isInvalid={errors.passportNo}\r\n                />\r\n                {errors.passportNo ? (\r\n                  <span className=\"text-danger\">{t(`${errors.passportNo?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Emirates ID\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Emirates ID\")}\r\n                  name=\"emiratesId\"\r\n                  ref={register}\r\n                  isValid={formState.touched.emiratesId && !errors.emiratesId}\r\n                  isInvalid={errors.emiratesId}\r\n                />\r\n                {errors.emiratesId ? (\r\n                  <span className=\"text-danger\">{t(`${errors.emiratesId?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Family Book No\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.No\")}\r\n                  name=\"familyBookNo\"\r\n                  ref={register}\r\n                  isValid={formState.touched.familyBookNo && !errors.familyBookNo}\r\n                  isInvalid={errors.familyBookNo}\r\n                />\r\n                {errors.familyBookNo ? (\r\n                  <span className=\"text-danger\">{t(`${errors.familyBookNo?.message}`)}</span>\r\n                ) : null}\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row className=\"splitTitle\">\r\n              <h5>{t(\"Forms.Contact information\")} </h5>\r\n            </Form.Row>\r\n            <Form.Row>\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridEmail\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Contact Number\")} <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <div className=\"inputWithIcon\">\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Forms.Contact Number\")}\r\n                    name=\"contactNo\"\r\n                    ref={register}\r\n                    isValid={formState.touched.contactNo && !errors.contactNo}\r\n                    isInvalid={errors.contactNo}\r\n                  />\r\n                  {errors.contactNo ? (\r\n                    <span className=\"text-danger\">{t(`${errors.contactNo?.message}`)}</span>\r\n                  ) : null}\r\n                  <Image src={phone} />\r\n                </div>\r\n              </Form.Group>\r\n\r\n              <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n                <Form.Label>\r\n                  {t(\"Forms.Primary Email\")}\r\n                  <span className=\"required\">*</span>\r\n                </Form.Label>\r\n                <div className=\"inputWithIcon\">\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={t(\"Forms.Primary Email\")}\r\n                    name=\"primaryEmail\"\r\n                    ref={register}\r\n                    isValid={formState.touched.primaryEmail && !errors.primaryEmail}\r\n                    isInvalid={errors.primaryEmail}\r\n                  />\r\n                  {errors.primaryEmail ? (\r\n                    <span className=\"text-danger\">{t(`${errors.primaryEmail?.message}`)}</span>\r\n                  ) : null}\r\n                  <Image src={email} />\r\n                </div>\r\n              </Form.Group>\r\n            </Form.Row>\r\n            <Form.Row className=\"splitTitle\">\r\n              <h5>{t(\"Buttons.Attachments\")}</h5>\r\n            </Form.Row>\r\n            <AttachmentComponent withslidercarosel={false} />\r\n            {props.isForReviewPage ? <SaveAndCancel onCancel={onCancelHandler} /> : <NextButton />}\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default OwnerDetailComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\add-area-extention\\reason-for-area-extention\\reason-for-area-extention.tsx",["424","425","426","427","428"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Card, Col, Container, Form, Image, Row } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { FormInputsInterface, formSchema } from \"./reason-for-area-extention-helper\";\r\nimport arrow from \"../../../../assets/arrow-white.svg\";\r\nimport map from \"../../../../assets/map.svg\";\r\n\r\nimport \"./reason-for-area-extention.scss\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../../redux/reducers/helper\";\r\nimport { IProps } from \"../shared/components-props\";\r\nimport SaveAndCancel from \"../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\n\r\nconst ReasonForAreaExtention = (props: IProps) => {\r\n  const { t }: { t: any } = useTranslation();\r\n  const { data } = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.locationInformationsReducer\r\n  );\r\n\r\n  const { register, handleSubmit, errors, formState, reset } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n  const changeParentToggleEvent = () => {\r\n    if (props.isForReviewPage) {\r\n      props.onSubmitOrCancelEvent();\r\n    }\r\n  };\r\n  const onCancelHandler = () => changeParentToggleEvent();\r\n\r\n  useEffect(() => {\r\n    // bind inputs values with it's state\r\n    // this will be very helpfull when we want reuse the component with its values\r\n    reset(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reset]);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (values: FormInputsInterface) => {\r\n    if (formState.isValid) {\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_LOACTION_INFORMATION,\r\n        payload: values,\r\n      });\r\n      // move to next step\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n      });\r\n      // set progress bar  +10 %\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PROGRESS_PERSENTAGE,\r\n        payload: 10,\r\n      });\r\n      changeParentToggleEvent();\r\n    }\r\n  };\r\n\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Card className=\"reLocationComponent\">\r\n      <Card.Body>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" sm=\"12\" controlId=\"establishmentName\">\r\n              {/* <Form.Label>Old building information</Form.Label> */}\r\n              <div className=\"staticData\">\r\n                <div className=\"staticDataContent\">\r\n                  <Row>\r\n                    <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Texts.Initial Licence Number\")}</p>\r\n                      <span>{t(\"Texts.Initial Licence Number\")}</span>\r\n                    </Col>\r\n                    <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Texts.Area\")}</p>\r\n                      <span>{t(\"Texts.Area\")}</span>\r\n                    </Col>\r\n                    <Col> </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Forms.Issue date\")}</p>\r\n                      <span>Issue date</span>\r\n                    </Col>\r\n                    <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Forms.Expiry date\")}</p>\r\n                      <span>Expiry date</span>\r\n                    </Col>\r\n                    <Col> </Col>\r\n                  </Row>\r\n                </div>\r\n              </div>\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"12\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Texts.Reason For Area Extention\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Write the reason\")}\r\n                name=\"reason\"\r\n                ref={register}\r\n                isValid={formState.touched.reason && !errors.reason}\r\n                isInvalid={errors.reason}\r\n              />\r\n              {errors.reason ? (\r\n                <span className=\"text-danger\">{t(`${errors.reason?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          {props.isForReviewPage ? <SaveAndCancel onCancel={onCancelHandler} /> : <NextButton />}\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ReasonForAreaExtention;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\speciality\\remove-speciality\\remove-speciality.tsx",["429","430","431"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Card, Col, Container, Form, Image, Row } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { FormInputsInterface, formSchema } from \"./remove-speciality-helper\";\r\n\r\nimport \"./remove-speciality.scss\";\r\nimport \"../../pharamaceutical-establishment-screen/shared/shared.scss\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../../redux/reducers/helper\";\r\nimport { IProps } from \"../shared/components-props\";\r\nimport SaveAndCancel from \"../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\n\r\nconst RemoveSpeciality = (props: IProps) => {\r\n  const { t }: { t: any } = useTranslation();\r\n  const { data } = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.locationInformationsReducer\r\n  );\r\n\r\n  const { register, handleSubmit, errors, formState, reset } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n  const changeParentToggleEvent = () => {\r\n    if (props.isForReviewPage) {\r\n      props.onSubmitOrCancelEvent();\r\n    }\r\n  };\r\n  const onCancelHandler = () => changeParentToggleEvent();\r\n\r\n  useEffect(() => {\r\n    // bind inputs values with it's state\r\n    // this will be very helpfull when we want reuse the component with its values\r\n    reset(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reset]);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (values: FormInputsInterface) => {\r\n    if (formState.isValid) {\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_LOACTION_INFORMATION,\r\n        payload: values,\r\n      });\r\n      // move to next step\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n      });\r\n      // set progress bar  +10 %\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PROGRESS_PERSENTAGE,\r\n        payload: 10,\r\n      });\r\n      changeParentToggleEvent();\r\n    }\r\n  };\r\n\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Card className=\"reLocationComponent\">\r\n      <Card.Body>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Form.Row>\r\n            <Form.Group\r\n              as={Col}\r\n              md=\"12\"\r\n              sm=\"12\"\r\n              controlId=\"formGridPassword\"\r\n              className=\"checkBoxesList\"\r\n            >\r\n              <Form.Label> {t(\"Titles.Please select Specialities\")}</Form.Label>\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h1\" label={t(\"Forms.Gynecology\")} custom />\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h2\" label={t(\"Forms.immunology\")} custom />\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h3\" label={t(\"Forms.Dermatology\")} custom />\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h4\" label={t(\"Forms.Neurology\")} custom />\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h5\" label={t(\"Forms.rehabilitation\")} custom />\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h6\" label={t(\"Forms.Psychiatry\")} custom />\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h7\" label={t(\"Forms.Surgery\")} custom checked />\r\n              <Form.Check type=\"checkbox\" name=\"test\" id=\"h8\" label={t(\"Forms.Urology\")} custom />\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n              <Form.Label>\r\n                {t(\"Forms.Total Number of Specialties\")}<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Total Number of Specialties\")}\r\n                name=\"area\"\r\n                ref={register}\r\n                isValid={formState.touched.area && !errors.area}\r\n                isInvalid={errors.area}\r\n              />\r\n              {errors.area ? (\r\n                <span className=\"text-danger\">{t(`${errors.area?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridState\">\r\n              <Form.Label>\r\n                {t(\"Forms.Number of Beds\")}<span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"emirate\"\r\n                ref={register}\r\n                isValid={formState.touched.emirate && !errors.emirate}\r\n                isInvalid={errors.emirate}\r\n              >\r\n                <option disabled selected value=\"\">\r\n                  {t(\"Forms.Number of Beds\")}\r\n                </option>\r\n                <option> Type 1</option>\r\n                <option> Type 2</option>\r\n                <option> Type 3</option>\r\n              </Form.Control>\r\n              {errors.emirate ? (\r\n                <span className=\"text-danger\">{t(`${errors.emirate?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"12\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>{t(\"Forms.Current Specialties of your Establishment\")}</Form.Label>\r\n              <div className=\"staticData\">\r\n                <div className=\"staticDataContent\">\r\n                  <Row>\r\n                    <Col md=\"3\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Titles.General Surgery\")}</p>\r\n                      <span>Added on DD/MM/YY</span>\r\n                    </Col>\r\n                    <Col md=\"3\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Titles.Internal Medicine\")}</p>\r\n                      <span>Added on DD/MM/YY</span>\r\n                    </Col>\r\n                    <Col md=\"3\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Titles.Orthopedics\")}</p>\r\n                      <span>Added on DD/MM/YY</span>\r\n                    </Col>\r\n                    <Col md=\"3\" sm=\"6\" xs=\"12\">\r\n                      <p>{t(\"Titles.Pediatrics\")}</p>\r\n                      <span>Added on DD/MM/YY</span>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </div>\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          {props.isForReviewPage ? (\r\n            <SaveAndCancel onCancel={onCancelHandler} />\r\n          ) : (\r\n            <NextButton customText={t(\"Buttons.Go To Attachment\")} />\r\n          )}\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default RemoveSpeciality;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\request-information\\request-information.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\actionTypes\\index.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\self-evaluation\\self-evaluation.tsx",["432","433","434","435","436","437","438"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Card, Col, Form, Row, Button, Table, ToggleButton } from \"react-bootstrap\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { FormInputsInterface, formSchema } from \"./self-evaluation-helper\";\r\n\r\nimport \"./self-evaluation.scss\";\r\nimport \"../shared/shared.scss\";\r\n\r\n// Import images\r\nimport { ActionTypes } from \"../../../../redux/reducers/helper\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\n\r\nconst SelfEvaluationComponent = () => {\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const { register, handleSubmit, errors, formState } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n\r\n  const { t } = useTranslation();\r\n  const dispatch = useDispatch();\r\n  const history: any = useHistory();\r\n\r\n  const onSubmit = () => {\r\n    if (formState.isValid) {\r\n      // should make sure here all steps are done\r\n      history.push({\r\n        pathname: \"/attachment\",\r\n        state: {\r\n          withslidercarosel: true,\r\n        },\r\n      });\r\n      // dispatch({\r\n      //   type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_SELF_EVALUATION,\r\n      //   payload: data,\r\n      // });\r\n      // move to next step\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n      });\r\n    }\r\n  };\r\n\r\n  function onSuccess(files) {\r\n    console.log(files);\r\n  }\r\n\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Card>\r\n      <Card.Body>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th>{t(\"Forms.Description\")}</th>\r\n                <th>{t(\"Forms.Yes\")}</th>\r\n                <th>{t(\"Forms.No\")}</th>\r\n                <th>{t(\"Forms.N/A\")}</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  Lorem ipsum dolor sit amet consectetur adipisicing elit. Id quod exercitationem\r\n                  reiciendis fugiat et esse enim, qui laborum dignissimos, saepe voluptas error\r\n                  alias, possimus harum aut repellat. In, fugit delectus!\r\n                </td>\r\n                <td>\r\n                  <div className=\"radioButtons\">\r\n                    <div className=\"form-check\">\r\n                      <label className=\"noText\" htmlFor=\"q1-y\">\r\n                        <input\r\n                          name=\"q1\"\r\n                          type=\"radio\"\r\n                          id=\"q1-y\"\r\n                          className=\"form-check-input\"\r\n                          value=\"yes\"\r\n                          ref={register}\r\n                        />\r\n                        <i className=\"checkMark\"> </i>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div className=\"radioButtons\">\r\n                    <div className=\"form-check\">\r\n                      <label className=\"noText\" htmlFor=\"q1-no\">\r\n                        <input\r\n                          name=\"q1\"\r\n                          type=\"radio\"\r\n                          id=\"q1-no\"\r\n                          className=\"form-check-input\"\r\n                          value=\"no\"\r\n                          ref={register}\r\n                        />\r\n                        <i className=\"checkMark\"> </i>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </td>\r\n                <td>\r\n                  <div className=\"radioButtons\">\r\n                    <div className=\"form-check\">\r\n                      <label className=\"noText\" htmlFor=\"q1-na\">\r\n                        <input\r\n                          name=\"q1\"\r\n                          type=\"radio\"\r\n                          id=\"q1-na\"\r\n                          className=\"form-check-input\"\r\n                          value=\"na\"\r\n                          ref={register}\r\n                        />\r\n                        <i className=\"checkMark\"> </i>\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n          <Row>\r\n            <Col>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                name=\"disclaimer\"\r\n                id=\"disclaimer\"\r\n                label={t(\"Forms.Disclaimer\")}\r\n                custom\r\n                onChange={(e) => setChecked(e.currentTarget.checked)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <NextButton customText={t(\"Buttons.Go To Attachment\")} />\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default SelfEvaluationComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\attachment.tsx",["439","440"],"import React, { useState } from \"react\";\r\nimport \"./attachment.scss\";\r\nimport { Image, Button, Carousel } from \"react-bootstrap\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DragAreaComponent from \"./drag-area/drag-area\";\r\nimport UploadOptionsComponent from \"./upload-options/upload-options\";\r\nimport UploadingProcessing from \"./uploading-processing/uploading-processing\";\r\n\r\n// Import images\r\nimport file from \"../../../assets/file.svg\";\r\nimport del from \"../../../assets/delete.svg\";\r\nimport stepCheck from \"../../../assets/stepCheck.svg\";\r\nimport stepChecked from \"../../../assets/stepChecked.svg\";\r\nimport leftArrowBtn from \"../../../assets/leftArrowBtn.svg\";\r\nimport rightArrowBtn from \"../../../assets/rightArrowBtn.svg\";\r\nimport semiChecked from \"../../../assets/semiChecked.svg\";\r\nimport warning from \"../../../assets/warning.svg\";\r\n\r\nexport default function AttachmentComponent({ withslidercarosel }) {\r\n  const { t } = useTranslation();\r\n  const [index, setIndex] = useState(0);\r\n  const [index2, setIndex2] = useState(0);\r\n\r\n  const [showWarning, setShowWarning] = useState(false);\r\n\r\n  const [withSliderCarosel, setWithSliderCarosel] = useState(withslidercarosel || false);\r\n\r\n  const handleSelect = (selectedIndex: number) => {\r\n    setIndex(selectedIndex);\r\n  };\r\n\r\n  const prvSteps = () => {\r\n    setIndex2(0);\r\n  };\r\n\r\n  const nxtSteps = () => {\r\n    setIndex2(1);\r\n  };\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"state\">\r\n        <p>\r\n          {t(\"Titles.completed\")} <span>1 {t(\"Titles.of\")} 3</span>\r\n        </p>\r\n      </div>\r\n      <div className=\"steps\" hidden={withSliderCarosel}>\r\n        <span className=\"backRow\"> </span>\r\n        <Button className=\"step doneStep\" onClick={() => handleSelect(0)}>\r\n          <Image src={stepCheck} className=\"check\" />\r\n          <Image src={stepChecked} className=\"checked\" />\r\n          <Image src={semiChecked} className=\"semiChecked\" />\r\n          <span> {t(\"Titles.Passport\")}</span>\r\n        </Button>\r\n        <Button className=\"step currentStep\" onClick={() => handleSelect(1)}>\r\n          <Image src={stepCheck} className=\"check\" />\r\n          <Image src={stepChecked} className=\"checked\" />\r\n          <Image src={semiChecked} className=\"semiChecked\" />\r\n          <span> {t(\"Forms.Emirates ID\")}</span>\r\n        </Button>\r\n        <Button className=\"step\" onClick={() => handleSelect(2)}>\r\n          <Image src={stepCheck} className=\"check\" />\r\n          <Image src={stepChecked} className=\"checked\" />\r\n          <Image src={semiChecked} className=\"semiChecked\" />\r\n          <span> {t(\"Titles.Family Book\")}</span>\r\n        </Button>\r\n      </div>\r\n      <div className=\"steps\" hidden={!withSliderCarosel}>\r\n        <Carousel controls={false} interval={null} activeIndex={index2}>\r\n          <Carousel.Item>\r\n            <div className=\"stepsContainer\">\r\n              <span className=\"backRow\"> </span>\r\n              <Button className=\"step doneStep\" onClick={() => handleSelect(0)}>\r\n                <Image src={stepCheck} className=\"check\" />\r\n                <Image src={stepChecked} className=\"checked\" />\r\n                <Image src={semiChecked} className=\"semiChecked\" />\r\n                <span>{t(\"Titles.Passport\")}</span>\r\n              </Button>\r\n              <Button className=\"step currentStep\" onClick={() => handleSelect(1)}>\r\n                <Image src={stepCheck} className=\"check\" />\r\n                <Image src={stepChecked} className=\"checked\" />\r\n                <Image src={semiChecked} className=\"semiChecked\" />\r\n                <span>{t(\"Forms.Emirates ID\")}</span>\r\n              </Button>\r\n              <Button className=\"step\" onClick={() => handleSelect(2)}>\r\n                <Image src={stepCheck} className=\"check\" />\r\n                <Image src={stepChecked} className=\"checked\" />\r\n                <Image src={semiChecked} className=\"semiChecked\" />\r\n                <span>{t(\"Titles.Family Book\")}</span>\r\n              </Button>\r\n            </div>\r\n          </Carousel.Item>\r\n          <Carousel.Item>\r\n            <div className=\"stepsContainer\">\r\n              <span className=\"backRow\"> </span>\r\n              <Button className=\"step doneStep\" onClick={() => handleSelect(0)}>\r\n                <Image src={stepCheck} className=\"check\" />\r\n                <Image src={stepChecked} className=\"checked\" />\r\n                <span>1</span>\r\n              </Button>\r\n              <Button className=\"step\" onClick={() => handleSelect(1)}>\r\n                <Image src={stepCheck} className=\"check\" />\r\n                <Image src={stepChecked} className=\"checked\" />\r\n                <span>{t(\"Forms.Emirates ID\")}</span>\r\n              </Button>\r\n              <Button className=\"step\" onClick={() => handleSelect(2)}>\r\n                <Image src={stepCheck} className=\"check\" />\r\n                <Image src={stepChecked} className=\"checked\" />\r\n                <span>{t(\"Titles.Family Book\")}</span>\r\n              </Button>\r\n            </div>\r\n          </Carousel.Item>\r\n        </Carousel>\r\n        <Button className=\"leftNavigation\" onClick={() => prvSteps()}>\r\n          <Image src={leftArrowBtn} />\r\n        </Button>\r\n        <Button className=\"rightNavigation\" onClick={() => nxtSteps()}>\r\n          <Image src={rightArrowBtn} />\r\n        </Button>\r\n      </div>\r\n      {/* Start slider */}\r\n      <Carousel controls={false} activeIndex={index}>\r\n        <Carousel.Item>\r\n          <DragAreaComponent />\r\n          <UploadOptionsComponent />\r\n          <UploadingProcessing />\r\n          {/* Start Files List */}\r\n          <div className=\"files\">\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* End Files List */}\r\n        </Carousel.Item>\r\n        <Carousel.Item>\r\n          <DragAreaComponent />\r\n          <UploadOptionsComponent />\r\n          <UploadingProcessing />\r\n          {/* Start Files List */}\r\n          <div className=\"files\">\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* End Files List */}\r\n        </Carousel.Item>\r\n        <Carousel.Item>\r\n          <DragAreaComponent />\r\n          <UploadOptionsComponent />\r\n          <UploadingProcessing />\r\n          {/* Start Files List */}\r\n          <div className=\"files\">\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n            <div className=\"file\">\r\n              <div className=\"leftData\">\r\n                <Image src={file} />\r\n                <div className=\"fileData\">\r\n                  <p>Passport</p>\r\n                  <span>65 Kb</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"rightData\">\r\n                <Image src={del} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* End Files List */}\r\n        </Carousel.Item>\r\n      </Carousel>\r\n      {/* Eng slider  */}\r\n      <div className=\"warning\" hidden={!showWarning}>\r\n        <Image src={warning} />\r\n        <p>\r\n          {t(\"Texts.Your staff criteria needs to be fulfilled to continue submitting the application\")}\r\n          <br />\r\n          {t(\"Texts.Kindly refer to email sent for staff criteria or view the online service card\")}\r\n        </p>\r\n        <Button>{t(\"Buttons.Close\")}</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\atoms\\buttons\\next-button\\next-button.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\atoms\\buttons\\save-and-cancel\\save-and-cancel.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\change-name-of-pharmaceutical-establishment.js",["441"],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\change-name-payment-screen.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\reviewer-comment.js",["442","443"],"import React, { Component, Fragment } from \"react\";\r\nimport { Card, Col, Container, Row } from \"react-bootstrap\";\r\nimport UserIcon from \"../../../assets/reviewer/user-sample.svg\";\r\nimport ReviewerDocuments from \"./reviewer-documents\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport \"./reviewerComment.scss\";\r\n\r\nclass ReviewerComment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const files = [\r\n      {\r\n        name: \"abc\",\r\n        id: \"1\",\r\n        size: \"34\",\r\n      },\r\n      {\r\n        name: \"abc 2\",\r\n        id: \"1\",\r\n        size: \"34\",\r\n      },\r\n      {\r\n        name: \"abc 3\",\r\n        id: \"1\",\r\n        size: \"34\",\r\n      },\r\n    ];\r\n    this.setState({\r\n      fileArray: files,\r\n    });\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const reviewer_comment = t(\"Titles.ReviewerComment\");\r\n    const tr_attachment_file = t(\"Titles.AllDocuments\");\r\n    const tr_license_status = t(\"Titles.LicenseStatus\");\r\n    const tr_license_no = t(\"Titles.LicenseNo\");\r\n    const tr_issue_date = t(\"Titles.IssueDate\");\r\n    const tr_expiry_date = t(\"Titles.ExpiryDate\");\r\n    const submit = t(\"Buttons.Submit\");\r\n\r\n    return (\r\n      <Fragment>\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col xl={2} />\r\n            <Col xl={8} style={{ marginBottom: \"100px\" }}>\r\n              <Card.Body className={\"whiteColor mt-4 reviewer-card\"}>\r\n                <Row>\r\n                  <Col xl={7} lg={7} sm={7}>\r\n                    <Row className={\"mt-4\"}>\r\n                      <Col xl={2} className={\"user-img\"}>\r\n                        <div className={\"profile-icon-name\"}>\r\n                          <img src={UserIcon} height={\"50px\"} width={\"50px\"} />\r\n                        </div>\r\n                      </Col>\r\n                      <Col xl={9}>\r\n                        <label className={\"label-preview-large\"}>\r\n                          {reviewer_comment}\r\n                        </label>\r\n                        <p className={\"grey-color\"}>Text Comment here --</p>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                  <Col xl={5} lg={5} sm={5}>\r\n                    <Row style={{ textAlign: \"center\", direction: \"ltr\" }}>\r\n                      <Col xl={6} className={\"border-bottom-reviewer\"}>\r\n                        <label>{tr_license_status}</label>\r\n                        <p className={\"grey-color\"}>license_status</p>\r\n                      </Col>\r\n                      <Col\r\n                        xl={6}\r\n                        className={\r\n                          \"border-bottom-reviewer border-left-reviewer\"\r\n                        }\r\n                      >\r\n                        <label>{tr_license_no}</label>\r\n                        <p className={\"grey-color\"}>license_no</p>\r\n                      </Col>\r\n                      <Col xl={6}>\r\n                        <label>{tr_issue_date}</label>\r\n                        <p className={\"grey-color\"}>issue_date</p>\r\n                      </Col>\r\n                      <Col xl={6} className={\"border-left-reviewer\"}>\r\n                        <label>{tr_expiry_date}</label>\r\n                        <p className={\"grey-color\"}>expiry_date</p>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </Row>\r\n              </Card.Body>\r\n              <Card.Body className={\"whiteColor mt-4 reviewer-attachment-card\"}>\r\n                <Card.Body>\r\n                  <Row className={\"mb-2\"}>\r\n                    <Col xl={12}>\r\n                      <p className={\"final_attachment_title\"}>\r\n                        {tr_attachment_file}\r\n                      </p>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{ marginTop: \"1rem\" }}>\r\n                    <Col xl={12}>\r\n                      {this.state.fileArray &&\r\n                        this.state.fileArray.map((files, index) => (\r\n                          <ReviewerDocuments files={files} />\r\n                        ))}\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card.Body>\r\n              {/*<Row>*/}\r\n              {/*  <div*/}\r\n              {/*    className=\"nextBtn\"*/}\r\n              {/*    style={{ margin: \"-17px auto -40px auto\" }}*/}\r\n              {/*  >*/}\r\n              {/*    <Button*/}\r\n              {/*      variant=\"success\"*/}\r\n              {/*      type=\"submit\"*/}\r\n              {/*      // onClick={this.submitAttachmentData}*/}\r\n              {/*    >*/}\r\n              {/*      {submit}*/}\r\n              {/*    </Button>*/}\r\n              {/*  </div>*/}\r\n              {/*</Row>*/}\r\n            </Col>\r\n            <Col xl={2} />\r\n          </Row>\r\n        </Container>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(ReviewerComment);\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\routes.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\relocation-license-screen\\location-inforamtion\\location-information.tsx",["444","445","446"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Card, Col, Container, Form, Image, Row } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { FormInputsInterface, formSchema } from \"./location-information-helper\";\r\nimport arrow from \"../../../../assets/arrow-white.svg\";\r\nimport map from \"../../../../assets/map.svg\";\r\n\r\nimport \"./location-information.scss\";\r\nimport { ActionTypes, StateSelectorInterface } from \"../../../../redux/reducers/helper\";\r\nimport { IProps } from \"../shared/components-props\";\r\nimport SaveAndCancel from \"../../../atoms/buttons/save-and-cancel/save-and-cancel\";\r\nimport NextButton from \"../../../atoms/buttons/next-button/next-button\";\r\n\r\nconst LocationInformationComponent = (props: IProps) => {\r\n  const { t }: { t: any } = useTranslation();\r\n  const { data } = useSelector(\r\n    (s: StateSelectorInterface) => s.pharmaceuticalEstablishment.locationInformationsReducer\r\n  );\r\n\r\n  const { register, handleSubmit, errors, formState, reset } = useForm({\r\n    resolver: yupResolver(formSchema),\r\n    mode: \"all\",\r\n  });\r\n  const changeParentToggleEvent = () => {\r\n    if (props.isForReviewPage) {\r\n      props.onSubmitOrCancelEvent();\r\n    }\r\n  };\r\n  const onCancelHandler = () => changeParentToggleEvent();\r\n\r\n  useEffect(() => {\r\n    // bind inputs values with it's state\r\n    // this will be very helpfull when we want reuse the component with its values\r\n    reset(data);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [reset]);\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (values: FormInputsInterface) => {\r\n    if (formState.isValid) {\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_LOACTION_INFORMATION,\r\n        payload: values,\r\n      });\r\n      // move to next step\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.NEXT_STEP_NUMBER,\r\n      });\r\n      // set progress bar  +10 %\r\n      dispatch({\r\n        type: ActionTypes.PharmaceuticalEstablishmentActionTypes.SET_PROGRESS_PERSENTAGE,\r\n        payload: 10,\r\n      });\r\n      changeParentToggleEvent();\r\n    }\r\n  };\r\n\r\n  return (\r\n    /**\r\n     * this should be abstacted  . later i will bake a style for card only usin styled component\r\n     */\r\n    <Card className=\"reLocationComponent\">\r\n      <Card.Body>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridState\">\r\n              <Form.Label>\r\n                {t(\"Forms.Emirate\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"emirate\"\r\n                ref={register}\r\n                isValid={formState.touched.emirate && !errors.emirate}\r\n                isInvalid={errors.emirate}\r\n              >\r\n                <option disabled selected value=\"\">\r\n                  {t(\"Forms.Emirate\")}\r\n                </option>\r\n                <option> Type 1</option>\r\n                <option> Type 2</option>\r\n                <option> Type 3</option>\r\n              </Form.Control>\r\n              {errors.emirate ? (\r\n                <span className=\"text-danger\">{t(`${errors.emirate?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"formGridPassword\">\r\n              <Form.Label>\r\n                {t(\"Forms.Area\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Area\")}\r\n                name=\"area\"\r\n                ref={register}\r\n                isValid={formState.touched.area && !errors.area}\r\n                isInvalid={errors.area}\r\n              />\r\n              {errors.area ? (\r\n                <span className=\"text-danger\">{t(`${errors.area?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Street\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Street\")}\r\n                name=\"street\"\r\n                ref={register}\r\n                isValid={formState.touched.street && !errors.street}\r\n                isInvalid={errors.street}\r\n              />\r\n              {errors.street ? (\r\n                <span className=\"text-danger\">{t(`${errors.street?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Po Box\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Po Box\")}\r\n                name=\"poBox\"\r\n                ref={register}\r\n                isValid={formState.touched.poBox && !errors.poBox}\r\n                isInvalid={errors.poBox}\r\n              />\r\n              {errors.poBox ? (\r\n                <span className=\"text-danger\">{t(`${errors.poBox?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Building Name\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Building Name\")}\r\n                name=\"buildingName\"\r\n                ref={register}\r\n                isValid={formState.touched.buildingName && !errors.buildingName}\r\n                isInvalid={errors.buildingName}\r\n              />\r\n              {errors.buildingName ? (\r\n                <span className=\"text-danger\">{t(`${errors.buildingName?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Building No\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={t(\"Forms.Building No\")}\r\n                name=\"buildingNo\"\r\n                ref={register}\r\n                isValid={formState.touched.buildingNo && !errors.buildingNo}\r\n                isInvalid={errors.buildingNo}\r\n              />\r\n              {errors.buildingNo ? (\r\n                <span className=\"text-danger\">{t(`${errors.buildingNo?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} md=\"6\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label>\r\n                {t(\"Forms.Google Map Url\")} <span className=\"required\">*</span>\r\n              </Form.Label>\r\n\r\n              <div className=\"inputWithIcon\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder={t(\"Forms.Google Map Url\")}\r\n                  name=\"mapUrl\"\r\n                  ref={register}\r\n                  isValid={formState.touched.mapUrl && !errors.mapUrl}\r\n                  isInvalid={errors.mapUrl}\r\n                />\r\n                <Image src={map} />\r\n              </div>\r\n              {errors.mapUrl ? (\r\n                <span className=\"text-danger\">{t(`${errors.mapUrl?.message}`)}</span>\r\n              ) : null}\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} md=\"12\" sm=\"12\" controlId=\"establishmentName\">\r\n              <Form.Label> {t(\"Titles.Old building information\")}</Form.Label>\r\n\r\n              <div className=\"oldData\">\r\n                <div className=\"oldDataContent\">\r\n                  <Col>\r\n                    <Row>\r\n                      <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                        <p> {t(\"Forms.Building Name\")}</p>\r\n                        <span>Building Name</span>\r\n                      </Col>\r\n                      <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                        <p> {t(\"Forms.Street\")}</p>\r\n                        <span>Street</span>\r\n                      </Col>\r\n                      <Col> </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                        <p> {t(\"Forms.Emirate\")}</p>\r\n                        <span>Emirate</span>\r\n                      </Col>\r\n                      <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                        <p> {t(\"Forms.Area\")}</p>\r\n                        <span>Area</span>\r\n                      </Col>\r\n                      <Col md=\"4\" sm=\"6\" xs=\"12\">\r\n                        <p> {t(\"Forms.Building No\")}</p>\r\n                        <span>Building NO</span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Col>\r\n                </div>\r\n              </div>\r\n            </Form.Group>\r\n          </Form.Row>\r\n          {props.isForReviewPage ? <SaveAndCancel onCancel={onCancelHandler} /> : <NextButton />}\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default LocationInformationComponent;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\preview-information.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\final-attachment\\final-attachment.js",["447"],"import React, { Component, Fragment } from \"react\";\r\nimport { Button, Card, Col, Container, Row } from \"react-bootstrap\";\r\nimport File from \"../../../../assets/file.svg\";\r\nimport DraggerAttachmentComponent from \"./dragger-attachment\";\r\nimport RequestInformation from \"../../../request-information/request-information\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport documentClose from \"../../../../assets/delete.svg\";\r\nimport { uuidv4 } from \"../../../../utils/UtilMethods\";\r\n\r\n/**\r\n * This will render final approval attachment for user to upload\r\n */\r\nclass FinalAttachment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fileArray: [],\r\n    };\r\n  }\r\n\r\n  submitAttachmentData = () => {\r\n    const { fileArray = [] } = this.state;\r\n    if (fileArray && fileArray.length > 0 && fileArray.length === 1) {\r\n      console.log(fileArray);\r\n    } else if (fileArray && fileArray.length > 1) {\r\n      console.log(\"FAIL\");\r\n    }\r\n  };\r\n\r\n  /*\r\n   *  This method is used to convert into base64 format\r\n   * */\r\n  convertBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        resolve(fileReader.result);\r\n      };\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n\r\n  /*\r\n   *  This method provides selected files\r\n   * */\r\n  handleUpload = async (info) => {\r\n    let fileObj = {};\r\n    let files = info.target.files;\r\n    const base64 = await this.convertBase64(files[0]);\r\n    fileObj.fileId = uuidv4();\r\n    fileObj.name = files[0].name;\r\n    fileObj.size = files[0].size;\r\n    fileObj.file = files[0];\r\n    fileObj.base64 = base64;\r\n\r\n    let fileArray = [fileObj];\r\n    this.setState({ fileArray: fileArray });\r\n  };\r\n\r\n  /*\r\n   * This method is used to remove uploaded file\r\n   * */\r\n  handleRemove = (fileId) => {\r\n    const { fileArray } = this.state;\r\n    this.setState({\r\n      fileArray: fileArray.filter((item) => item.fileId !== fileId),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const error_establishment_name = t(\"App.va_establishment_name\");\r\n    const tr_attachment_file = t(\"Titles.attachment_file\");\r\n    const tr_facility_license_heading = t(\r\n      \"Titles.facility_license_issued_by_mohap\"\r\n    );\r\n    const submit = t(\"Buttons.Submit\");\r\n    return (\r\n      <Fragment>\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col xl={12} />\r\n            <RequestInformation />\r\n            <Col xl={12} />\r\n          </Row>\r\n          <Row>\r\n            <Col xl={2} />\r\n            <Col xl={8} style={{ marginBottom: \"100px\" }}>\r\n              <Card className={\"whiteColor final_attachment_main_card\"}>\r\n                <Card.Body>\r\n                  <Row className={\"mb-2\"}>\r\n                    <Col xl={12}>\r\n                      <p className={\"final_attachment_title\"}>\r\n                        {tr_attachment_file}\r\n                      </p>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col xl={12}>\r\n                      <p className={\"final_attachment_subtitle\"}>\r\n                        {tr_facility_license_heading}\r\n                      </p>\r\n                    </Col>\r\n                  </Row>\r\n                  <DraggerAttachmentComponent\r\n                    handleupload={this.handleUpload}\r\n                    filelist={this.state.fileArray}\r\n                  />\r\n\r\n                  <Row style={{ marginTop: \"1rem\" }}>\r\n                    <Col xl={12}>\r\n                      {this.state.fileArray &&\r\n                        this.state.fileArray.map((files, index) => (\r\n                          <Card\r\n                            key={\"ep\" + index}\r\n                            className=\"doc-wrap card_custome_viewdocument final_approval_uploaded_file_card\"\r\n                          >\r\n                            <Row>\r\n                              <Col xl={2} lg={2} sm={2}>\r\n                                <div style={{ textAlign: \"center\" }}>\r\n                                  <img\r\n                                    className=\"process-img\"\r\n                                    src={File}\r\n                                    style={{ padding: \"5px\" }}\r\n                                    alt={\"\"}\r\n                                  />\r\n                                </div>\r\n                              </Col>\r\n                              <Col xl={9} lg={9} sm={9} className={\"align-me\"}>\r\n                                <div>\r\n                                  <h4>{files.name}</h4>\r\n                                  <p>{files.size} kb</p>\r\n                                </div>\r\n                              </Col>\r\n                              <Col xl={1} lg={1} sm={1} className={\"align-me\"}>\r\n                                <img\r\n                                  className=\"mr-2 circle-close\"\r\n                                  src={documentClose}\r\n                                  alt=\"Close Icon\"\r\n                                  onClick={() =>\r\n                                    this.handleRemove(files.fileId)\r\n                                  }\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </Card>\r\n                        ))}\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n              <Row>\r\n                <div\r\n                  className=\"nextBtn\"\r\n                  style={{ margin: \"-17px auto -40px auto\" }}\r\n                >\r\n                  <Button\r\n                    variant=\"success\"\r\n                    type=\"submit\"\r\n                    onClick={this.submitAttachmentData}\r\n                  >\r\n                    {submit}\r\n                  </Button>\r\n                </div>\r\n              </Row>\r\n              {/* <div className=\"steps-action\">\r\n                                <div className=\"step-btn\">\r\n                                    <Button\r\n                                        className=\"final_attachment_submit_btn\"\r\n                                        onClick={this.submitAttachmentData}\r\n                                    >\r\n                                       {submit}\r\n                  </Button>\r\n                                </div>\r\n                            </div> */}\r\n            </Col>\r\n            <Col xl={2} />\r\n          </Row>\r\n        </Container>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// FinalApprovalAttachment.propTypes = {\r\n//   intl: PropTypes.object.isRequired,\r\n//   uploadArrayOfObject: PropTypes.array.isRequired,\r\n//   handleApprovalAttachmentSuccess: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default withTranslation()(FinalAttachment);\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\establishment-information.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\contact-information.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\location-information.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\owner-details.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\step-number.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\partner-details.tsx",["448"],"/* eslint-disable @typescript-eslint/comma-dangle */\r\nimport { partnerDetailInitialState } from \"../../../components/screens/pharamaceutical-establishment-screen/partner-details/add-partner/add-partner-helper\";\r\nimport { PharmaceuticalEstablishmentActionTypes } from \"./actions-types\";\r\n\r\nconst initalState = {\r\n  data: [],\r\n  isComplete: false,\r\n};\r\n\r\nconst partnerDetailsReducer = (state = initalState, action: { type: string; payload: any }) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case PharmaceuticalEstablishmentActionTypes.SET_PARTNER_DETAILS:\r\n      // no data here mean he could not have any patner\r\n      return {\r\n        data: state.data,\r\n        isComplete: true,\r\n      };\r\n    case PharmaceuticalEstablishmentActionTypes.Add_New_PARTNER:\r\n      return {\r\n        data: [payload, ...state.data],\r\n        isComplete: true,\r\n      };\r\n    case PharmaceuticalEstablishmentActionTypes.Remove_New_PARTNER:\r\n      return {\r\n        data: state.data.filter((e: any) => e.passportNo !== payload),\r\n        isComplete: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default partnerDetailsReducer;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\self-evaluation.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\progress-bar.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\redux\\reducers\\pharmaceutical-establishment\\actions-types.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\speciality\\remove-speciality\\remove-speciality-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\add-area-extention\\reason-for-area-extention\\reason-for-area-extention-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\reviewer-documents.js",["449"],"import React, { Component, Fragment } from \"react\";\r\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport File from \"../../../assets/reviewer/file.png\";\r\nimport UpArrow from \"../../../assets/reviewer/upArrow.svg\";\r\nimport AttachOption from \"./attach-option\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nfunction uuidv4() {\r\n  return \"xxxxxxxx-xxxx-4xxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\nclass ReviewerDocuments extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n      showFileUpload: false,\r\n      fileArray: [],\r\n    };\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  handleUpload = async (info) => {\r\n    this.setState({\r\n      fileArray: [],\r\n    });\r\n    let fileObj = {};\r\n    let files = info.target.files;\r\n    const base64 = await this.convertBase64(files[0]);\r\n    fileObj.fileId = uuidv4();\r\n    fileObj.name = files[0].name;\r\n    fileObj.size = files[0].size;\r\n    fileObj.file = files[0];\r\n    fileObj.base64 = base64;\r\n\r\n    let fileArray = [...this.state.fileArray, fileObj];\r\n    this.setState({ fileArray: fileArray });\r\n    console.log(\"UPLOADED FILE \", fileArray);\r\n  };\r\n\r\n  convertBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        resolve(fileReader.result);\r\n      };\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n\r\n  changeUploadFile = () => {\r\n    this.setState({\r\n      showFileUpload: !this.state.showFileUpload,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { t, files = [] } = this.props;\r\n    const tr_drag_and_drop_documents = t(\"Titles.DragAndDropDocuments\");\r\n    const upload_file = t(\"Buttons.UploadFile\");\r\n    const cancel = t(\"Buttons.Cancel\");\r\n    const tr_browse_from_computer = t(\"Titles.BrowseFromComputer\");\r\n    const tr_supported_files_for_upload = t(\"Titles.SupportedFilesForUpload\");\r\n\r\n    const { showFileUpload } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        {showFileUpload && (\r\n          <Card className=\"display-reviewercomment-uploadFile-card mb-3 p-4\">\r\n            <Col lg={12} sm={12} xl={12}>\r\n              <input\r\n                id=\"myInput\"\r\n                accept=\".pdf,.png,.jpeg,.docx\"\r\n                type=\"file\"\r\n                ref={(ref) => (this.upload = ref)}\r\n                style={{ display: \"none\" }}\r\n                onChange={(e) => this.handleUpload(e)}\r\n              />\r\n              <Row>\r\n                <Col xl={6} lg={6} sm={6} className={\"label-file-name\"}>\r\n                  <h4>{files.name}</h4>\r\n                </Col>\r\n                <Col xl={6} lg={6} sm={6} className={\"cancel-btn-reviewer\"}>\r\n                  <Button\r\n                    className={\"button-upload-file\"}\r\n                    onClick={this.changeUploadFile}\r\n                  >\r\n                    {cancel}\r\n                    {/*<FormattedMessage id=\"App.cancel\"/>*/}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Card>\r\n                <Card.Body\r\n                  className=\"final_approval_file_upload\"\r\n                  filelist={this.props.fileList}\r\n                  onClick={() => this.upload.click()}\r\n                >\r\n                  <img className=\"upload-img\" src={UpArrow} alt={\"\"} />\r\n                  <h3>{tr_drag_and_drop_documents}</h3>\r\n                  <p\r\n                    className={\"upload-small-font\"}\r\n                    style={{ color: \"#AAB5BE\" }}\r\n                  >\r\n                    {tr_supported_files_for_upload}\r\n                  </p>\r\n                  <Button\r\n                    className={\"dragger-upload-button\"}\r\n                    shape=\"round\"\r\n                    style={{ borderRadius: \"24px\" }}\r\n                  >\r\n                    {tr_browse_from_computer}\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col xl={12}>\r\n              <Row>\r\n                <Col xl={2} />\r\n                <Col xl={8}>\r\n                  <div style={{ textAlign: \"center\" }}>\r\n                    <AttachOption />\r\n                  </div>\r\n                </Col>\r\n                <Col xl={2} />\r\n              </Row>\r\n            </Col>\r\n          </Card>\r\n        )}\r\n\r\n        {!showFileUpload && (\r\n          <Card key={\"ep\"} className=\"display-reviewercomment-card mb-3\">\r\n            <Row>\r\n              <Col xl={2} lg={2} sm={2}>\r\n                <div className={\"image-file-upload\"}>\r\n                  <img\r\n                    className=\"process-img\"\r\n                    src={File}\r\n                    style={{ padding: \"5px\" }}\r\n                    alt={\"\"}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col xl={7} lg={7} sm={7} className={\"align-me\"}>\r\n                <div className={\"direction-ltr\"}>\r\n                  <h4>{files.name}</h4>\r\n                  <p>{files.size} kb</p>\r\n                </div>\r\n              </Col>\r\n              <Col xl={3} lg={3} sm={3} className={\"align-me\"}>\r\n                <Button\r\n                  variant=\"light\"\r\n                  className={\"button-upload-file\"}\r\n                  onClick={this.changeUploadFile}\r\n                >\r\n                  {upload_file}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Card>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nReviewerDocuments.propTypes = {\r\n  files: PropTypes.object.isRequired,\r\n};\r\nexport default withTranslation()(ReviewerDocuments);\r\n// export default injectIntl(ReviewerDocuments);\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\constants\\errors\\validation-msg.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\initial-preview-step\\PreviewScreenComponent.js",["450","451","452","453","454","455","456","457"],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\final-attachment\\dragger-attachment.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\partner-details.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\owner-details.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\location-information.js",["458"],"import React, { Component, Fragment } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Form,\r\n  Image,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport locationImage from \"../../../../assets/location.svg\";\r\nimport upArrow from \"../../../../assets/upArrow4Collaps.svg\";\r\nimport map from \"../../../../assets/map.svg\";\r\n\r\nclass LocationInformation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: true,\r\n    };\r\n  }\r\n\r\n  toggleArrow = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        isOpen: !prevState.isOpen,\r\n      };\r\n    });\r\n  };\r\n  render() {\r\n    const { t } = this.props;\r\n    const { isOpen = false } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <Accordion className={\"mt-3\"}>\r\n          <Card>\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              eventKey=\"0\"\r\n              onClick={() => this.toggleArrow()}\r\n            >\r\n              <Row className={\"header-info\"}>\r\n                <Image src={locationImage} className=\"ml-3 mr-4 greenIc\" />\r\n                <h3 className=\"text-success\">\r\n                  {t(\"Titles.Location Information\")}\r\n                </h3>\r\n                <Image\r\n                  src={upArrow}\r\n                  className={\r\n                    isOpen ? \"arrow rotate ml-3 mr-3\" : \"arrow ml-3 mr-3\"\r\n                  }\r\n                />\r\n              </Row>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                <Row>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"}>\r\n                    <Form.Label className={\"label-preview-large\"}>\r\n                      <strong>{t(\"tr_emirate\")}</strong>\r\n                    </Form.Label>\r\n                    <p className={\"label-light\"}>{t(\"tr_emirate_value\")}</p>\r\n                  </Col>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"}>\r\n                    <Form.Label className={\"label-preview-large\"}>\r\n                      <strong>{t(\"tr_area\")}</strong>\r\n                    </Form.Label>\r\n                    <p className={\"label-light\"}>{t(\"tr_area_value\")}</p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"}>\r\n                    <Form.Label className={\"label-preview-large\"}>\r\n                      <strong>{t(\"tr_street\")}</strong>\r\n                    </Form.Label>\r\n                    <p className={\"label-light\"}>{t(\"tr_street_value\")}</p>\r\n                  </Col>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"}>\r\n                    <Form.Label className={\"label-preview-large\"}>\r\n                      <strong>{t(\"tr_building_name\")}</strong>\r\n                    </Form.Label>\r\n                    <p className={\"label-light\"}>\r\n                      {t(\"tr_building_name_value\")}\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"}>\r\n                    <Form.Label className={\"label-preview-large\"}>\r\n                      <strong>{t(\"tr_po_box\")}</strong>\r\n                    </Form.Label>\r\n                    <p className={\"label-light\"}>{t(\"tr_po_box_value\")}</p>\r\n                  </Col>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"}>\r\n                    <Form.Label className={\"label-preview-large\"}>\r\n                      <strong>{t(\"tr_google_map_url\")}</strong>\r\n                    </Form.Label>\r\n                    <br />\r\n                    <a href={\"#\"} target=\"blank\">\r\n                      <Button className=\"btn-red\">\r\n                        <Image src={map} />\r\n                        {t(\"tr_google_map_url_value\")}\r\n                      </Button>\r\n                    </a>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"}>\r\n                    <Form.Label className={\"label-preview-large\"}>\r\n                      <strong>{t(\"tr_fax\")}</strong>\r\n                    </Form.Label>\r\n                    <p className={\"label-light\"}>{t(\"tr_fax_value\")}</p>\r\n                  </Col>\r\n                  <Col xl={\"6\"} lg={\"6\"} sm={\"6\"} />\r\n                </Row>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(LocationInformation);\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\contact-information.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\utils\\UtilMethods.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\preview-information\\establishment-information.js",["459"],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\name-change-form.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\attachment-file.js",["460","461","462","463","464"],"import React, { Component } from \"react\";\r\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\r\nimport Stepper from \"react-stepper-horizontal\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport EstablishmentPlanUpload from \"./establishment-plan-upload\";\r\nimport EstablishmentPlanUploadName from \"./establishment-plan-upload-name\";\r\nimport EstablishmentPlanUploadDepartment from \"./establishment-plan-upload-department\";\r\nimport RequestInformation from \"../../../request-information/request-information\";\r\nimport Activetick from \"../../../../assets/active_tick.svg\";\r\nimport Disabletick from \"../../../../assets/stepCheck.svg\";\r\nimport Successtick from \"../../../../assets/stepChecked.svg\";\r\nimport rightArrow from \"../../../../assets/rightArrowBtn.svg\";\r\nimport leftArrow from \"../../../../assets/leftArrowBtn.svg\";\r\n\r\nclass AttachmentFile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      current: 0,\r\n      currentTab: 1,\r\n      isOpen: false,\r\n      isDisabled: true,\r\n      step1: [],\r\n      step2: [],\r\n      step3: [],\r\n      isSubmitClicked: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.updateStepUsingProps();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const {\r\n      step1 = [],\r\n      step2 = [],\r\n      step3 = [],\r\n      currentTab,\r\n      isSubmitClicked,\r\n    } = this.state;\r\n    if (\r\n      isSubmitClicked === false &&\r\n      (step1.length > 0 || step2.length > 0 || step3.length > 0)\r\n    ) {\r\n      this.props.handleOnlyAttachments({\r\n        step1,\r\n        step2,\r\n        step3,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChange = (current) => {\r\n    this.setState({ current });\r\n  };\r\n\r\n  prev = () => {\r\n    const current = this.state.current - 1;\r\n    const currentTab = this.state.currentTab - 1;\r\n    this.setState({ current });\r\n    if (currentTab === 1) {\r\n      this.setState({ currentTab: 1 });\r\n    } else if (currentTab === 2) {\r\n      this.setState({ currentTab: 2 });\r\n    }\r\n  };\r\n\r\n  next() {\r\n    const {\r\n      step1 = [],\r\n      step2 = [],\r\n      step3 = [],\r\n      currentTab = 0,\r\n      current: stateCurrent,\r\n    } = this.state;\r\n    if (step1.length > 0 && currentTab === 1) {\r\n      const current = stateCurrent + 1;\r\n      this.setState({ current: current, currentTab: 2 });\r\n    } else if (step2.length > 0 && currentTab === 2) {\r\n      const current = stateCurrent + 1;\r\n      this.setState({ current: current, currentTab: 3, isDisabled: false });\r\n    } else if (step3.length > 0 && currentTab === 3) {\r\n      const current = stateCurrent + 1;\r\n      this.setState({ current: current, currentTab: 3 });\r\n    }\r\n  }\r\n  handleEstablishmentRequest = (array) => {\r\n    this.setState({\r\n      step2: array,\r\n    });\r\n  };\r\n\r\n  handleLocation = (array) => {\r\n    this.setState({\r\n      step3: array,\r\n    });\r\n  };\r\n\r\n  handleEstablishmentPlan = (array) => {\r\n    this.setState({\r\n      step1: array,\r\n    });\r\n  };\r\n  // This is GoToPreview Step\r\n  manupulateAttachmentData = () => {\r\n    const { step1 = [], step2 = [], step3 = [], currentTab } = this.state;\r\n    if (\r\n      currentTab === 3 &&\r\n      step1.length > 0 &&\r\n      step2.length > 0 &&\r\n      step3.length > 0\r\n    ) {\r\n      this.setState({ isSubmitClicked: true }, () => {\r\n        this.props.handleAttachmentSuccess({\r\n          step1,\r\n          step2,\r\n          step3,\r\n        });\r\n      });\r\n    }\r\n    //return this.props.attachmentData(data)\r\n  };\r\n  toggle = () => {\r\n    this.setState((prevState) => ({\r\n      isOpen: !prevState.isOpen,\r\n    }));\r\n  };\r\n  updateStepUsingProps = () => {\r\n    const { attachmentFormData = {} } = this.props;\r\n    if (attachmentFormData) {\r\n      const { step1 = [], step2 = [], step3 = [] } = attachmentFormData;\r\n      this.setState({\r\n        step1: step1,\r\n        step2: step2,\r\n        step3: step3,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    let icon1 = \"\";\r\n    let icon2 = \"\";\r\n    let icon3 = \"\";\r\n    const { current } = this.state;\r\n    if (current === 0) {\r\n      icon1 = Activetick;\r\n      icon2 = Disabletick;\r\n      icon3 = Disabletick;\r\n    } else if (current === 1) {\r\n      icon1 = Successtick;\r\n      icon2 = Activetick;\r\n      icon3 = Disabletick;\r\n    } else if (current === 2) {\r\n      icon1 = Successtick;\r\n      icon2 = Successtick;\r\n      icon3 = Activetick;\r\n    }\r\n\r\n    const { t } = this.props;\r\n    const tr_attachment_file = t(\"Titles.attachment_file\");\r\n    const tr_establishment_plan = t(\"Titles.establishment_plan\");\r\n    const tr_establishment_request_letter = t(\r\n      \"Titles.establishment_request_letter\"\r\n    );\r\n    const tr_location_photos = t(\"Titles.location_photos\");\r\n    const tr_facility_license_issued_by = t(\r\n      \"Titles.facility_license_issued_by_mohap\"\r\n    );\r\n    const tr_letter_from_the_owner_requesting = t(\r\n      \"Titles.letter_from_the_owner_requesting\"\r\n    );\r\n    const tr_trade_license_issued_by_the_department = t(\r\n      \"Titles.trade_license_issued_by_the_department\"\r\n    );\r\n\r\n    const steps = [\r\n      {\r\n        title: tr_facility_license_issued_by,\r\n        content: <EstablishmentPlanUpload />,\r\n        icon: icon1,\r\n      },\r\n      {\r\n        title: tr_letter_from_the_owner_requesting,\r\n        content: <EstablishmentPlanUploadName />,\r\n        icon: icon2,\r\n      },\r\n      {\r\n        title: tr_trade_license_issued_by_the_department,\r\n        content: <EstablishmentPlanUploadDepartment />,\r\n        icon: icon3,\r\n      },\r\n    ];\r\n\r\n    const comp = steps[current].content;\r\n    const tr_1of4 = t(\"Titles.\" + (current + 1) + \"of4\");\r\n    const tr_completed = t(\"Titles.completed\");\r\n\r\n    return (\r\n      <>\r\n        <React.Fragment>\r\n          <Row>\r\n            <Col xl={2} />\r\n            <Col xl={8}>\r\n              <RequestInformation />\r\n            </Col>\r\n            <Col xl={2} />\r\n          </Row>\r\n          <Row>\r\n            <Col xl={2} />\r\n            <Col\r\n              xl={8}\r\n              style={{\r\n                marginBottom: \"100px\",\r\n              }}\r\n            >\r\n              <div className=\"mt-1\" style={{ marginTop: \"10px\" }}>\r\n                <Row className=\"attach-stepper \">\r\n                  <Col xl={12}>\r\n                    <Card.Body\r\n                      style={{ backgroundColor: \"white\", margin: \"-20px\" }}\r\n                    >\r\n                      <div className=\"upload_content\">\r\n                        <div className=\"stepper-title\">\r\n                          <h1 style={{ textAlign: \"start\" }}>\r\n                            {tr_attachment_file}\r\n                          </h1>\r\n                          <div\r\n                            className=\"steps-num\"\r\n                            style={{ textAlign: \"end\", marginTop: \"-40px\" }}\r\n                          >\r\n                            <span>\r\n                              {tr_completed} <strong>{tr_1of4}</strong>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          className=\"stepper      mb-5\"\r\n                          style={{ display: \"flex\" }}\r\n                        >\r\n                          <Col xl={1}>\r\n                            {current > 0 && (\r\n                              <div\r\n                                className=\"prev-btn prev_custom_btn\"\r\n                                onClick={() => this.prev()}\r\n                              >\r\n                                <img\r\n                                  className=\"leftArrow\"\r\n                                  src={leftArrow}\r\n                                  alt=\"prev\"\r\n                                />\r\n                              </div>\r\n                            )}\r\n                          </Col>\r\n                          <Col xl={10}>\r\n                            <Stepper steps={steps} activeStep={current} />\r\n                          </Col>\r\n                          <Col xl={1}>\r\n                            {current < steps.length - 1 && (\r\n                              <div\r\n                                className=\"next-btn next_custom_btn\"\r\n                                onClick={() => this.next()}\r\n                              >\r\n                                {/* <RightOutlined /> */}\r\n                                <img\r\n                                  className=\"rightArrow\"\r\n                                  src={rightArrow}\r\n                                  alt=\"next\"\r\n                                />\r\n                              </div>\r\n                            )}\r\n                          </Col>\r\n                        </div>\r\n                        <div className=\"steps-content\">\r\n                          {current === 0 ? (\r\n                            <EstablishmentPlanUpload\r\n                              //uploadedData={this.state.establishmentPlanData}\r\n                              uploadArrayOfObject={this.state.step1}\r\n                              submit={this.handleEstablishmentPlan}\r\n                            />\r\n                          ) : current === 1 ? (\r\n                            <EstablishmentPlanUploadName\r\n                              // uploadedData={this.state.establishmentRequestData}\r\n                              uploadArrayOfObject={this.state.step2}\r\n                              submit={this.handleEstablishmentRequest}\r\n                            />\r\n                          ) : current === 2 ? (\r\n                            <EstablishmentPlanUploadDepartment\r\n                              // uploadedData={this.state.locationData}\r\n                              uploadArrayOfObject={this.state.step3}\r\n                              submit={this.handleLocation}\r\n                            />\r\n                          ) : null}\r\n                          {/* <comp /> */}\r\n                        </div>\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Col>\r\n                </Row>\r\n                {/* <Link to=\"#\"> */}\r\n                <div className=\"steps-action\" style={{ textAlign: \"center\" }}>\r\n                  <div className=\"step-btn\">\r\n                    <Button\r\n                      className=\"go_to_preview\"\r\n                      onClick={this.manupulateAttachmentData}\r\n                      disabled={this.state.isDisabled}\r\n                      style={{ width: \"200px\", height: \"50px\" }}\r\n                    >\r\n                      {t(\"Buttons.Go To Preview\")}\r\n                      {/* <FormattedMessage id=\"App.go_to_preview\" /> */}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n                {/* </Link> */}\r\n              </div>\r\n            </Col>\r\n            <Col xl={2} />\r\n          </Row>\r\n        </React.Fragment>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nAttachmentFile.defaultProps = {\r\n  handleOnlyAttachments: () => {},\r\n  handleAttachmentSuccess: () => {},\r\n};\r\n\r\nexport default withTranslation()(AttachmentFile);\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\relocation-license-screen\\location-inforamtion\\location-information-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\etablishment-inforamtion\\establishment-information-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\contact-inforamtion\\contact-information-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\location-inforamtion\\location-information-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\owner-detail\\owner-detail-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attach-option.js",["465","466","467","468"],"import React, { Component } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport laptoparrow from \"../../../assets/reviewer/local-system.svg\";\r\nimport dropbox from \"../../../assets/reviewer/dropbox.svg\";\r\nimport boxcloud from \"../../../assets/reviewer/boxcloud.svg\";\r\nimport onedrive from \"../../../assets/reviewer/onedrive.svg\";\r\n\r\nclass AttachOption extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row align=\"center\">\r\n          <Col className=\"cloud-icon\">\r\n            <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n              <Col>\r\n                <img\r\n                  className=\"icon-border icon-local-system\"\r\n                  src={laptoparrow}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <img className=\"icon-dropbox\" src={dropbox} />\r\n              </Col>\r\n              <Col>\r\n                <img className=\"icon-boxcloud\" src={boxcloud} />\r\n              </Col>\r\n              <Col>\r\n                <img className=\"icon-onedrive\" src={onedrive} />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AttachOption;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\establishment-plan-upload-department.js",["469"],"import React, { Component } from \"react\";\r\nimport { Card, Col, Row } from \"react-bootstrap\";\r\nimport File from \"../../../../assets/file.svg\";\r\nimport DraggerAttachMent from \"./dragger-attachment\";\r\nimport { uuidv4 } from \"../../../../utils/UtilMethods\";\r\nimport documentClose from \"../../../../assets/delete.svg\";\r\n\r\nclass EstablishmentPlanUploadDepartment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fileArray:\r\n        this.props.uploadArrayOfObject &&\r\n        this.props.uploadArrayOfObject.length > 0\r\n          ? this.props.uploadArrayOfObject\r\n          : [],\r\n    };\r\n  }\r\n\r\n  convertBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        console.log(fileReader.result);\r\n        resolve(fileReader.result);\r\n      };\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n  handleupload = async (info) => {\r\n    let fileObj = {};\r\n    let files = info.target.files;\r\n    const base64 = await this.convertBase64(files[0]);\r\n    fileObj.fileId = uuidv4();\r\n    fileObj.name = files[0].name;\r\n    fileObj.size = files[0].size;\r\n    fileObj.file = files[0];\r\n    fileObj.base64 = base64;\r\n    let fileArray = [fileObj];\r\n    this.setState({ fileArray: fileArray });\r\n    return this.props.submit(fileArray);\r\n  };\r\n\r\n  handleRemove = (fileId) => {\r\n    const { fileArray } = this.state;\r\n    //const { filelist } = this.state;\r\n    this.setState({\r\n      fileArray: fileArray.filter((item) => item.fileId !== fileId),\r\n    });\r\n    return this.props.submit(\r\n      fileArray.filter((item) => item.fileId !== fileId)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <DraggerAttachMent\r\n          handleupload={this.handleupload}\r\n          filelist={this.state.fileArray}\r\n        />\r\n\r\n        <Row style={{ marginTop: \"1rem\" }}>\r\n          <Col xl={12}>\r\n            {this.state.fileArray &&\r\n              this.state.fileArray.map((files, index) => (\r\n                <Card.Body\r\n                  key={\"ep\" + index}\r\n                  className=\"doc-wrap card_custome_viewdocument\"\r\n                  style={{\r\n                    border: \"0\",\r\n                    marginBottom: \"1rem\",\r\n                    flexDirection: \"row\",\r\n                    display: \"flex\",\r\n                    marginTop: \"15px\",\r\n                  }}\r\n                >\r\n                  <Col xl={1} className=\"mr-5\" style={{ textAlign: \"start\" }}>\r\n                    <div>\r\n                      <img className=\"process-img\" src={File} />\r\n                    </div>\r\n                  </Col>\r\n                  <Col xl={9} style={{ textAlign: \"start\" }}>\r\n                    <div style={{}}>\r\n                      <h3>{files.name}</h3>\r\n                      <span>\r\n                        <p>{files.size}kb</p>\r\n                      </span>\r\n                    </div>\r\n                  </Col>\r\n                  <Col xl={2} style={{ textAlign: \"end\" }}>\r\n                    <img\r\n                      className=\"mr-2 circle-close\"\r\n                      src={documentClose}\r\n                      alt=\"Close Icon\"\r\n                      onClick={() => this.handleRemove(files.fileId)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    />\r\n                  </Col>\r\n                </Card.Body>\r\n              ))}\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default EstablishmentPlanUploadDepartment;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\establishment-plan-upload-name.js",["470"],"import React, { Component } from \"react\";\r\nimport { Card, Col, Row } from \"react-bootstrap\";\r\nimport File from \"../../../../assets/file.svg\";\r\nimport DraggerAttachMent from \"./dragger-attachment\";\r\nimport { uuidv4 } from \"../../../../utils/UtilMethods\";\r\nimport documentClose from \"../../../../assets/delete.svg\";\r\n\r\nclass EstablishmentPlanUploadName extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fileArray:\r\n        this.props.uploadArrayOfObject &&\r\n        this.props.uploadArrayOfObject.length > 0\r\n          ? this.props.uploadArrayOfObject\r\n          : [],\r\n    };\r\n  }\r\n\r\n  convertBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        console.log(fileReader.result);\r\n        resolve(fileReader.result);\r\n      };\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n  handleupload = async (info) => {\r\n    let fileObj = {};\r\n    let files = info.target.files;\r\n    const base64 = await this.convertBase64(files[0]);\r\n    fileObj.fileId = uuidv4();\r\n    fileObj.name = files[0].name;\r\n    fileObj.size = files[0].size;\r\n    fileObj.file = files[0];\r\n    fileObj.base64 = base64;\r\n\r\n    let fileArray = [fileObj];\r\n    this.setState({ fileArray: fileArray });\r\n    return this.props.submit(fileArray);\r\n  };\r\n\r\n  handleRemove = (fileId) => {\r\n    const { fileArray } = this.state;\r\n    //const { filelist } = this.state;\r\n    this.setState({\r\n      fileArray: fileArray.filter((item) => item.fileId !== fileId),\r\n    });\r\n    return this.props.submit(\r\n      fileArray.filter((item) => item.fileId !== fileId)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <DraggerAttachMent\r\n          handleupload={this.handleupload}\r\n          filelist={this.state.fileArray}\r\n        />\r\n\r\n        <Row style={{ marginTop: \"1rem\" }}>\r\n          <Col xl={12}>\r\n            {this.state.fileArray &&\r\n              this.state.fileArray.map((files, index) => (\r\n                <Card.Body\r\n                  key={\"ep\" + index}\r\n                  className=\"doc-wrap card_custome_viewdocument\"\r\n                  style={{\r\n                    border: \"0\",\r\n                    marginBottom: \"1rem\",\r\n                    flexDirection: \"row\",\r\n                    display: \"flex\",\r\n                    marginTop: \"15px\",\r\n                  }}\r\n                >\r\n                  <Col xl={1} className=\"mr-5\" style={{ textAlign: \"start\" }}>\r\n                    <div>\r\n                      <img className=\"process-img\" src={File} />\r\n                    </div>\r\n                  </Col>\r\n                  <Col xl={9} style={{ textAlign: \"start\" }}>\r\n                    <div style={{}}>\r\n                      <h3>{files.name}</h3>\r\n                      <span>\r\n                        <p>{files.size}kb</p>\r\n                      </span>\r\n                    </div>\r\n                  </Col>\r\n                  <Col xl={2} style={{ textAlign: \"end\" }}>\r\n                    <img\r\n                      className=\"mr-2 circle-close\"\r\n                      src={documentClose}\r\n                      alt=\"Close Icon\"\r\n                      onClick={() => this.handleRemove(files.fileId)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    />\r\n                  </Col>\r\n                </Card.Body>\r\n              ))}\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default EstablishmentPlanUploadName;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\establishment-plan-upload.js",["471"],"import React, { Component } from \"react\";\r\nimport { Card, Col, Row } from \"react-bootstrap\";\r\n// import { CloseCircleFilled } from \"@ant-design/icons\";\r\nimport File from \"../../../../assets/file.svg\";\r\nimport DraggerAttachMent from \"./dragger-attachment\";\r\nimport { uuidv4 } from \"../../../../utils/UtilMethods\";\r\nimport documentClose from \"../../../../assets/delete.svg\";\r\n\r\nclass EstablishmentPlanUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fileArray:\r\n        this.props.uploadArrayOfObject &&\r\n        this.props.uploadArrayOfObject.length > 0\r\n          ? this.props.uploadArrayOfObject\r\n          : [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      const { uploadArrayOfObject = [] } = this.props;\r\n      if (uploadArrayOfObject && uploadArrayOfObject.length >= 1) {\r\n        this.setState({ fileArray: uploadArrayOfObject });\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  convertBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        console.log(fileReader.result);\r\n        resolve(fileReader.result);\r\n      };\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n  handleupload = async (info) => {\r\n    let fileObj = {};\r\n    let files = info.target.files;\r\n\r\n    if (files.length >= 0) {\r\n      console.log(\"TEST\", files);\r\n      const base64 = await this.convertBase64(files[0]);\r\n      fileObj.fileId = uuidv4();\r\n      fileObj.name = files[0].name;\r\n      fileObj.size = files[0].size;\r\n      fileObj.file = files[0];\r\n      fileObj.base64 = base64;\r\n\r\n      //let filelist = [...this.state.filelist, files[0]];\r\n      let fileArray = [fileObj];\r\n      this.setState({ fileArray: fileArray });\r\n      return this.props.submit(fileArray);\r\n    }\r\n    // const base64 = await this.convertBase64(files[0]);\r\n    // fileObj.fileId = uuidv4();\r\n    // fileObj.name = files[0].name;\r\n    // fileObj.size = files[0].size;\r\n    // fileObj.file = files[0];\r\n    // fileObj.base64 = base64;\r\n\r\n    // //let filelist = [...this.state.filelist, files[0]];\r\n    // let fileArray = [...this.state.fileArray, fileObj];\r\n    // this.setState({ fileArray: fileArray });\r\n    // return this.props.submit(fileArray);\r\n  };\r\n\r\n  handleRemove = (fileId) => {\r\n    const { fileArray } = this.state;\r\n    this.setState({\r\n      fileArray: fileArray.filter((item) => item.fileId !== fileId),\r\n    });\r\n    return this.props.submit(\r\n      fileArray.filter((item) => item.fileId !== fileId)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <DraggerAttachMent\r\n          handleupload={this.handleupload}\r\n          filelist={this.state.fileArray}\r\n        />\r\n\r\n        <Row style={{ marginTop: \"1rem\" }}>\r\n          <Col xl={12}>\r\n            {this.state.fileArray &&\r\n              this.state.fileArray.map((files, index) => (\r\n                <Card.Body\r\n                  key={\"ep\" + index}\r\n                  className=\"doc-wrap card_custome_viewdocument\"\r\n                  style={{\r\n                    border: \"0\",\r\n                    marginBottom: \"1rem\",\r\n                    flexDirection: \"row\",\r\n                    display: \"flex\",\r\n                    marginTop: \"15px\",\r\n                  }}\r\n                >\r\n                  <Col xl={1} className=\"mr-5\" style={{ textAlign: \"start\" }}>\r\n                    <div>\r\n                      <img className=\"process-img\" src={File} />\r\n                    </div>\r\n                  </Col>\r\n                  <Col xl={9} style={{ textAlign: \"start\" }}>\r\n                    <div style={{}}>\r\n                      <h3>{files.name}</h3>\r\n                      <span>\r\n                        <p>{files.size}kb</p>\r\n                      </span>\r\n                    </div>\r\n                  </Col>\r\n                  <Col xl={2} style={{ textAlign: \"end\" }}>\r\n                    <img\r\n                      className=\"mr-2 circle-close\"\r\n                      src={documentClose}\r\n                      alt=\"Close Icon\"\r\n                      onClick={() => this.handleRemove(files.fileId)}\r\n                      style={{ cursor: \"pointer\" }}\r\n                    />\r\n                  </Col>\r\n                </Card.Body>\r\n              ))}\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default EstablishmentPlanUpload;\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\pharamaceutical-establishment-screen\\self-evaluation\\self-evaluation-helper.ts",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\uploading-processing\\uploading-processing.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\upload-options\\upload-options.tsx",["472","473","474"],"import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./upload-options.scss\";\r\nimport { Button, Image } from \"react-bootstrap\";\r\n\r\n// Import images\r\nimport fromPc from \"../../../../assets/fromPc.svg\";\r\nimport cloud from \"../../../../assets/cloud.png\";\r\nimport box from \"../../../../assets/box.png\";\r\nimport DropBoxChooserComponent from \"../../../helpers/uploaders/dropbox\";\r\nimport OneDriveChooserComponent from \"../../../helpers/uploaders/onedrive\";\r\n\r\nexport default function UploadOptionsComponent() {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=\"uploadOptions\">\r\n      <Image src={fromPc} />\r\n      {/* <Image src={dropbox} /> */}\r\n      <DropBoxChooserComponent />\r\n      <Image src={cloud} />\r\n      {/* <Button variant=\"primary\">\r\n        <OneDriveChooserComponent />\r\n      </Button> */}\r\n\r\n      <Image src={box} />\r\n    </div>\r\n  );\r\n}\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\templates\\attachment\\drag-area\\drag-area.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\screens\\change-name-of-pharmaceutical-establishment\\attachment-file\\dragger-attachment.js",["475","476"],"import React, { Component } from \"react\";\r\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\r\nimport UpArrow from \"../../../../assets/upArrow.svg\";\r\nimport AttachOption from \"../attach-option\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nclass DraggerAttachMent extends Component {\r\n  render() {\r\n    const { t } = this.props;\r\n    const tr_drag_and_drop_documents = t(\"Titles.drag_and_drop_documents\");\r\n    const tr_browse_from_computer = t(\"Titles.browse_from_computer\");\r\n    const tr_supported_files_for_upload = t(\r\n      \"Titles.supported_files_for_upload\"\r\n    );\r\n\r\n    const props = {\r\n      name: \"file\",\r\n      multiple: false,\r\n      showUploadList: {\r\n        showDownloadIcon: false,\r\n      },\r\n      onRemove: (file) => {\r\n        this.setState((state) => {\r\n          return {\r\n            fileList: [],\r\n          };\r\n        });\r\n      },\r\n      beforeUpload: (file) => {\r\n        console.log(file);\r\n        const isLt10M = file.size / 1024 / 1024 < 10;\r\n        if (!isLt10M) {\r\n          //message.error('Image must smaller than 10MB!');\r\n          this.setState({ uploadStatus: false });\r\n        }\r\n        this.setState((state) => ({\r\n          fileList: [file],\r\n        }));\r\n        return false;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          <Col xs={12}>\r\n            <input\r\n              id=\"myInput\"\r\n              accept=\".pdf,.png,.jpeg,.docx\"\r\n              type=\"file\"\r\n              ref={(ref) => (this.upload = ref)}\r\n              style={{ display: \"none\" }}\r\n              onChange={(e) => this.props.handleupload(e)}\r\n              // multiple\r\n            />\r\n            <Card>\r\n              <Card.Body\r\n                className=\"file_upload\"\r\n                //style={{borderStyle:\"dotted\",backgroundColor:\"gainsboro\"}}\r\n                filelist={this.props.fileList}\r\n                //showUploadList={false}\r\n                //  beforeUpload={() => false}\r\n                onClick={(e) => this.upload.click()}\r\n              >\r\n                <img className=\"upload-img\" src={UpArrow} />\r\n                <h3>{tr_drag_and_drop_documents}</h3>\r\n                <p className={\"upload-small-font\"} style={{ color: \"#AAB5BE\" }}>\r\n                  {tr_supported_files_for_upload}\r\n                </p>\r\n                <Button\r\n                  className={\"dragger-upload-button\"}\r\n                  shape=\"round\"\r\n                  style={{\r\n                    borderRadius: \"24px\",\r\n                    backgroundColor: \"#848683\",\r\n                    borderColor: \"#848683\",\r\n                  }}\r\n                >\r\n                  {tr_browse_from_computer}\r\n                </Button>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col span={24}>\r\n            <AttachOption />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTranslation()(DraggerAttachMent);\r\n","H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\components\\helpers\\uploaders\\dropbox.tsx",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\utils\\index.js",[],"H:\\Work_amnex\\code\\frontend\\integrated-code-latest\\INTEGRATED_DEV_COMMON\\src\\utils\\toast.js",[],{"ruleId":"477","replacedBy":"478"},{"ruleId":"479","replacedBy":"480"},{"ruleId":"481","severity":1,"message":"482","line":16,"column":47,"nodeType":"483","messageId":"484","endLine":16,"endColumn":56},{"ruleId":"485","severity":1,"message":"486","line":67,"column":13,"nodeType":"487","endLine":67,"endColumn":16},{"ruleId":"485","severity":1,"message":"486","line":178,"column":21,"nodeType":"487","endLine":178,"endColumn":24},{"ruleId":"481","severity":1,"message":"488","line":25,"column":9,"nodeType":"483","messageId":"484","endLine":25,"endColumn":24},{"ruleId":"489","severity":1,"message":"490","line":15,"column":1,"nodeType":"491","endLine":62,"endColumn":2},{"ruleId":"477","replacedBy":"478"},{"ruleId":"479","replacedBy":"480"},{"ruleId":"489","severity":1,"message":"490","line":9,"column":1,"nodeType":"491","endLine":29,"endColumn":2},{"ruleId":"481","severity":1,"message":"492","line":5,"column":55,"nodeType":"483","messageId":"484","endLine":5,"endColumn":60},{"ruleId":"481","severity":1,"message":"493","line":5,"column":70,"nodeType":"483","messageId":"484","endLine":5,"endColumn":75},{"ruleId":"481","severity":1,"message":"494","line":17,"column":8,"nodeType":"483","messageId":"484","endLine":17,"endColumn":27},{"ruleId":"485","severity":1,"message":"495","line":246,"column":27,"nodeType":"487","endLine":246,"endColumn":38},{"ruleId":"481","severity":1,"message":"496","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":14},{"ruleId":"481","severity":1,"message":"497","line":6,"column":10,"nodeType":"483","messageId":"484","endLine":6,"endColumn":25},{"ruleId":"481","severity":1,"message":"498","line":9,"column":10,"nodeType":"483","messageId":"484","endLine":9,"endColumn":16},{"ruleId":"481","severity":1,"message":"499","line":13,"column":8,"nodeType":"483","messageId":"484","endLine":13,"endColumn":21},{"ruleId":"481","severity":1,"message":"500","line":1,"column":17,"nodeType":"483","messageId":"484","endLine":1,"endColumn":25},{"ruleId":"481","severity":1,"message":"501","line":13,"column":8,"nodeType":"483","messageId":"484","endLine":13,"endColumn":20},{"ruleId":"481","severity":1,"message":"502","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":25},{"ruleId":"481","severity":1,"message":"503","line":10,"column":8,"nodeType":"483","messageId":"484","endLine":10,"endColumn":14},{"ruleId":"481","severity":1,"message":"504","line":14,"column":8,"nodeType":"483","messageId":"484","endLine":14,"endColumn":18},{"ruleId":"481","severity":1,"message":"505","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":23},{"ruleId":"481","severity":1,"message":"506","line":20,"column":8,"nodeType":"483","messageId":"484","endLine":20,"endColumn":31},{"ruleId":"481","severity":1,"message":"507","line":17,"column":8,"nodeType":"483","messageId":"484","endLine":17,"endColumn":13},{"ruleId":"481","severity":1,"message":"508","line":24,"column":9,"nodeType":"483","messageId":"484","endLine":24,"endColumn":16},{"ruleId":"481","severity":1,"message":"509","line":2,"column":53,"nodeType":"483","messageId":"484","endLine":2,"endColumn":59},{"ruleId":"481","severity":1,"message":"510","line":15,"column":8,"nodeType":"483","messageId":"484","endLine":15,"endColumn":21},{"ruleId":"481","severity":1,"message":"511","line":19,"column":8,"nodeType":"483","messageId":"484","endLine":19,"endColumn":14},{"ruleId":"481","severity":1,"message":"512","line":34,"column":11,"nodeType":"483","messageId":"484","endLine":34,"endColumn":19},{"ruleId":"481","severity":1,"message":"513","line":36,"column":9,"nodeType":"483","messageId":"484","endLine":36,"endColumn":24},{"ruleId":"481","severity":1,"message":"509","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":16},{"ruleId":"481","severity":1,"message":"514","line":3,"column":35,"nodeType":"483","messageId":"484","endLine":3,"endColumn":40},{"ruleId":"481","severity":1,"message":"515","line":3,"column":42,"nodeType":"483","messageId":"484","endLine":3,"endColumn":45},{"ruleId":"481","severity":1,"message":"509","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":16},{"ruleId":"481","severity":1,"message":"482","line":3,"column":29,"nodeType":"483","messageId":"484","endLine":3,"endColumn":38},{"ruleId":"481","severity":1,"message":"515","line":3,"column":53,"nodeType":"483","messageId":"484","endLine":3,"endColumn":56},{"ruleId":"481","severity":1,"message":"507","line":9,"column":8,"nodeType":"483","messageId":"484","endLine":9,"endColumn":13},{"ruleId":"481","severity":1,"message":"507","line":16,"column":8,"nodeType":"483","messageId":"484","endLine":16,"endColumn":13},{"ruleId":"481","severity":1,"message":"509","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":16},{"ruleId":"481","severity":1,"message":"482","line":3,"column":29,"nodeType":"483","messageId":"484","endLine":3,"endColumn":38},{"ruleId":"481","severity":1,"message":"514","line":3,"column":46,"nodeType":"483","messageId":"484","endLine":3,"endColumn":51},{"ruleId":"481","severity":1,"message":"507","line":9,"column":8,"nodeType":"483","messageId":"484","endLine":9,"endColumn":13},{"ruleId":"481","severity":1,"message":"516","line":10,"column":8,"nodeType":"483","messageId":"484","endLine":10,"endColumn":11},{"ruleId":"481","severity":1,"message":"509","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":16},{"ruleId":"481","severity":1,"message":"482","line":3,"column":29,"nodeType":"483","messageId":"484","endLine":3,"endColumn":38},{"ruleId":"481","severity":1,"message":"514","line":3,"column":46,"nodeType":"483","messageId":"484","endLine":3,"endColumn":51},{"ruleId":"481","severity":1,"message":"509","line":3,"column":32,"nodeType":"483","messageId":"484","endLine":3,"endColumn":38},{"ruleId":"481","severity":1,"message":"517","line":3,"column":47,"nodeType":"483","messageId":"484","endLine":3,"endColumn":59},{"ruleId":"481","severity":1,"message":"496","line":6,"column":10,"nodeType":"483","messageId":"484","endLine":6,"endColumn":14},{"ruleId":"481","severity":1,"message":"518","line":9,"column":10,"nodeType":"483","messageId":"484","endLine":9,"endColumn":29},{"ruleId":"481","severity":1,"message":"519","line":19,"column":10,"nodeType":"483","messageId":"484","endLine":19,"endColumn":17},{"ruleId":"481","severity":1,"message":"520","line":21,"column":35,"nodeType":"483","messageId":"484","endLine":21,"endColumn":41},{"ruleId":"481","severity":1,"message":"521","line":50,"column":12,"nodeType":"483","messageId":"484","endLine":50,"endColumn":21},{"ruleId":"481","severity":1,"message":"522","line":25,"column":23,"nodeType":"483","messageId":"484","endLine":25,"endColumn":37},{"ruleId":"481","severity":1,"message":"523","line":27,"column":29,"nodeType":"483","messageId":"484","endLine":27,"endColumn":49},{"ruleId":"524","severity":1,"message":"525","line":170,"column":7,"nodeType":"483","messageId":"484","endLine":170,"endColumn":22},{"ruleId":"524","severity":1,"message":"526","line":51,"column":11,"nodeType":"483","messageId":"484","endLine":51,"endColumn":17},{"ruleId":"527","severity":1,"message":"528","line":65,"column":27,"nodeType":"487","endLine":65,"endColumn":80},{"ruleId":"481","severity":1,"message":"509","line":3,"column":10,"nodeType":"483","messageId":"484","endLine":3,"endColumn":16},{"ruleId":"481","severity":1,"message":"482","line":3,"column":29,"nodeType":"483","messageId":"484","endLine":3,"endColumn":38},{"ruleId":"481","severity":1,"message":"507","line":9,"column":8,"nodeType":"483","messageId":"484","endLine":9,"endColumn":13},{"ruleId":"524","severity":1,"message":"529","line":75,"column":11,"nodeType":"483","messageId":"484","endLine":75,"endColumn":35},{"ruleId":"481","severity":1,"message":"530","line":2,"column":10,"nodeType":"483","messageId":"484","endLine":2,"endColumn":35},{"ruleId":"531","severity":1,"message":"532","line":12,"column":13,"nodeType":"533","messageId":"534","endLine":12,"endColumn":15},{"ruleId":"524","severity":1,"message":"535","line":115,"column":9,"nodeType":"483","messageId":"484","endLine":115,"endColumn":25},{"ruleId":"524","severity":1,"message":"536","line":179,"column":13,"nodeType":"483","messageId":"484","endLine":179,"endColumn":14},{"ruleId":"531","severity":1,"message":"532","line":296,"column":44,"nodeType":"533","messageId":"534","endLine":296,"endColumn":46},{"ruleId":"531","severity":1,"message":"532","line":309,"column":44,"nodeType":"533","messageId":"534","endLine":309,"endColumn":46},{"ruleId":"527","severity":1,"message":"528","line":558,"column":41,"nodeType":"487","endLine":561,"endColumn":43},{"ruleId":"527","severity":1,"message":"528","line":601,"column":41,"nodeType":"487","endLine":604,"endColumn":43},{"ruleId":"527","severity":1,"message":"528","line":644,"column":41,"nodeType":"487","endLine":647,"endColumn":43},{"ruleId":"485","severity":1,"message":"495","line":717,"column":25,"nodeType":"487","endLine":717,"endColumn":37},{"ruleId":"485","severity":1,"message":"495","line":100,"column":21,"nodeType":"487","endLine":100,"endColumn":50},{"ruleId":"485","severity":1,"message":"486","line":109,"column":25,"nodeType":"487","endLine":109,"endColumn":63},{"ruleId":"524","severity":1,"message":"537","line":39,"column":7,"nodeType":"483","messageId":"484","endLine":39,"endColumn":17},{"ruleId":"524","severity":1,"message":"538","line":161,"column":11,"nodeType":"483","messageId":"484","endLine":161,"endColumn":32},{"ruleId":"524","severity":1,"message":"539","line":162,"column":11,"nodeType":"483","messageId":"484","endLine":162,"endColumn":42},{"ruleId":"524","severity":1,"message":"540","line":165,"column":11,"nodeType":"483","messageId":"484","endLine":165,"endColumn":29},{"ruleId":"524","severity":1,"message":"541","line":194,"column":11,"nodeType":"483","messageId":"484","endLine":194,"endColumn":15},{"ruleId":"527","severity":1,"message":"528","line":16,"column":17,"nodeType":"487","endLine":19,"endColumn":19},{"ruleId":"527","severity":1,"message":"528","line":22,"column":17,"nodeType":"487","endLine":22,"endColumn":63},{"ruleId":"527","severity":1,"message":"528","line":25,"column":17,"nodeType":"487","endLine":25,"endColumn":65},{"ruleId":"527","severity":1,"message":"528","line":28,"column":17,"nodeType":"487","endLine":28,"endColumn":65},{"ruleId":"527","severity":1,"message":"528","line":83,"column":23,"nodeType":"487","endLine":83,"endColumn":65},{"ruleId":"527","severity":1,"message":"528","line":84,"column":23,"nodeType":"487","endLine":84,"endColumn":65},{"ruleId":"527","severity":1,"message":"528","line":109,"column":23,"nodeType":"487","endLine":109,"endColumn":65},{"ruleId":"481","severity":1,"message":"509","line":4,"column":10,"nodeType":"483","messageId":"484","endLine":4,"endColumn":16},{"ruleId":"481","severity":1,"message":"542","line":11,"column":8,"nodeType":"483","messageId":"484","endLine":11,"endColumn":32},{"ruleId":"481","severity":1,"message":"536","line":14,"column":11,"nodeType":"483","messageId":"484","endLine":14,"endColumn":12},{"ruleId":"524","severity":1,"message":"543","line":16,"column":11,"nodeType":"483","messageId":"484","endLine":16,"endColumn":16},{"ruleId":"527","severity":1,"message":"528","line":65,"column":17,"nodeType":"487","endLine":65,"endColumn":61},"no-native-reassign",["544"],"no-negated-in-lhs",["545"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'isInPaymentPage' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Table' is defined but never used.","'Modal' is defined but never used.","'AddPartnerComponent' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Link' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faHome' is defined but never used.","'smCloseButton' is defined but never used.","'useState' is defined but never used.","'contactImage' is defined but never used.","'contactImageWhite' is defined but never used.","'expand' is defined but never used.","'checkImage' is defined but never used.","'checkImageWhite' is defined but never used.","'SelfEvaluationComponent' is defined but never used.","'arrow' is defined but never used.","'history' is assigned a value but never used.","'Button' is defined but never used.","'SaveAndCancel' is defined but never used.","'remove' is defined but never used.","'register' is assigned a value but never used.","'onCancelHandler' is assigned a value but never used.","'Image' is defined but never used.","'Row' is defined but never used.","'map' is defined but never used.","'ToggleButton' is defined but never used.","'FormInputsInterface' is defined but never used.","'checked' is assigned a value but never used.","'errors' is assigned a value but never used.","'onSuccess' is defined but never used.","'setShowWarning' is assigned a value but never used.","'setWithSliderCarosel' is assigned a value but never used.","no-unused-vars","'isSuccessScreen' is assigned a value but never used.","'submit' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'error_establishment_name' is assigned a value but never used.","'partnerDetailInitialState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedDocIndex' is defined but never used.","'t' is assigned a value but never used.","'currentTab' is assigned a value but never used.","'tr_establishment_plan' is assigned a value but never used.","'tr_establishment_request_letter' is assigned a value but never used.","'tr_location_photos' is assigned a value but never used.","'comp' is assigned a value but never used.","'OneDriveChooserComponent' is defined but never used.","'props' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]